/*
 * GroupBy Retail
 *
 * GroupBy Retail API
 *
 * The version of the OpenAPI document: 0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using GroupByInc.RetailApi.Client.Client;
using GroupByInc.RetailApi.Client.Model;

namespace GroupByInc.RetailApi.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISearchApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Provided search functionality
        /// </summary>
        /// <remarks>
        /// Perform a facet search against the GroupBy Retail Search API.
        /// </remarks>
        /// <exception cref="GroupByInc.RetailApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xGroupbyCustomerId">Custom HTTP header which may contain tenant name. Used to define a client by its name.</param>
        /// <param name="facetSearchRequestDto">Request that should be populated to configure a search API call, made by the client on behalf of a shopper. Contains original request and information about facet for which extra keys requested.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FacetSearchResponseDto</returns>
        FacetSearchResponseDto FacetSearch(string xGroupbyCustomerId, FacetSearchRequestDto facetSearchRequestDto, int operationIndex = 0);

        /// <summary>
        /// Provided search functionality
        /// </summary>
        /// <remarks>
        /// Perform a facet search against the GroupBy Retail Search API.
        /// </remarks>
        /// <exception cref="GroupByInc.RetailApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xGroupbyCustomerId">Custom HTTP header which may contain tenant name. Used to define a client by its name.</param>
        /// <param name="facetSearchRequestDto">Request that should be populated to configure a search API call, made by the client on behalf of a shopper. Contains original request and information about facet for which extra keys requested.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FacetSearchResponseDto</returns>
        ApiResponse<FacetSearchResponseDto> FacetSearchWithHttpInfo(string xGroupbyCustomerId, FacetSearchRequestDto facetSearchRequestDto, int operationIndex = 0);
        /// <summary>
        /// Provided search functionality
        /// </summary>
        /// <remarks>
        /// Perform a search against the GroupBy Retail Search API.
        /// </remarks>
        /// <exception cref="GroupByInc.RetailApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xGroupbyCustomerId">Custom HTTP header which may contain tenant name. Used to define a client by its name.</param>
        /// <param name="searchRequestDto">Request that should be populated to configure a search API call, made by the client on behalf of a shopper.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchResponseDto</returns>
        SearchResponseDto Search(string xGroupbyCustomerId, SearchRequestDto searchRequestDto, int operationIndex = 0);

        /// <summary>
        /// Provided search functionality
        /// </summary>
        /// <remarks>
        /// Perform a search against the GroupBy Retail Search API.
        /// </remarks>
        /// <exception cref="GroupByInc.RetailApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xGroupbyCustomerId">Custom HTTP header which may contain tenant name. Used to define a client by its name.</param>
        /// <param name="searchRequestDto">Request that should be populated to configure a search API call, made by the client on behalf of a shopper.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchResponseDto</returns>
        ApiResponse<SearchResponseDto> SearchWithHttpInfo(string xGroupbyCustomerId, SearchRequestDto searchRequestDto, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISearchApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Provided search functionality
        /// </summary>
        /// <remarks>
        /// Perform a facet search against the GroupBy Retail Search API.
        /// </remarks>
        /// <exception cref="GroupByInc.RetailApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xGroupbyCustomerId">Custom HTTP header which may contain tenant name. Used to define a client by its name.</param>
        /// <param name="facetSearchRequestDto">Request that should be populated to configure a search API call, made by the client on behalf of a shopper. Contains original request and information about facet for which extra keys requested.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FacetSearchResponseDto</returns>
        System.Threading.Tasks.Task<FacetSearchResponseDto> FacetSearchAsync(string xGroupbyCustomerId, FacetSearchRequestDto facetSearchRequestDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Provided search functionality
        /// </summary>
        /// <remarks>
        /// Perform a facet search against the GroupBy Retail Search API.
        /// </remarks>
        /// <exception cref="GroupByInc.RetailApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xGroupbyCustomerId">Custom HTTP header which may contain tenant name. Used to define a client by its name.</param>
        /// <param name="facetSearchRequestDto">Request that should be populated to configure a search API call, made by the client on behalf of a shopper. Contains original request and information about facet for which extra keys requested.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FacetSearchResponseDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<FacetSearchResponseDto>> FacetSearchWithHttpInfoAsync(string xGroupbyCustomerId, FacetSearchRequestDto facetSearchRequestDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Provided search functionality
        /// </summary>
        /// <remarks>
        /// Perform a search against the GroupBy Retail Search API.
        /// </remarks>
        /// <exception cref="GroupByInc.RetailApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xGroupbyCustomerId">Custom HTTP header which may contain tenant name. Used to define a client by its name.</param>
        /// <param name="searchRequestDto">Request that should be populated to configure a search API call, made by the client on behalf of a shopper.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchResponseDto</returns>
        System.Threading.Tasks.Task<SearchResponseDto> SearchAsync(string xGroupbyCustomerId, SearchRequestDto searchRequestDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Provided search functionality
        /// </summary>
        /// <remarks>
        /// Perform a search against the GroupBy Retail Search API.
        /// </remarks>
        /// <exception cref="GroupByInc.RetailApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xGroupbyCustomerId">Custom HTTP header which may contain tenant name. Used to define a client by its name.</param>
        /// <param name="searchRequestDto">Request that should be populated to configure a search API call, made by the client on behalf of a shopper.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchResponseDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchResponseDto>> SearchWithHttpInfoAsync(string xGroupbyCustomerId, SearchRequestDto searchRequestDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISearchApi : ISearchApiSync, ISearchApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SearchApi : ISearchApi
    {
        private GroupByInc.RetailApi.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SearchApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SearchApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SearchApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SearchApi(string basePath)
        {
            this.Configuration = GroupByInc.RetailApi.Client.Client.Configuration.MergeConfigurations(
                GroupByInc.RetailApi.Client.Client.GlobalConfiguration.Instance,
                new GroupByInc.RetailApi.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new GroupByInc.RetailApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new GroupByInc.RetailApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = GroupByInc.RetailApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SearchApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SearchApi(GroupByInc.RetailApi.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = GroupByInc.RetailApi.Client.Client.Configuration.MergeConfigurations(
                GroupByInc.RetailApi.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new GroupByInc.RetailApi.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new GroupByInc.RetailApi.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = GroupByInc.RetailApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SearchApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SearchApi(GroupByInc.RetailApi.Client.Client.ISynchronousClient client, GroupByInc.RetailApi.Client.Client.IAsynchronousClient asyncClient, GroupByInc.RetailApi.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = GroupByInc.RetailApi.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public GroupByInc.RetailApi.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public GroupByInc.RetailApi.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public GroupByInc.RetailApi.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public GroupByInc.RetailApi.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Provided search functionality Perform a facet search against the GroupBy Retail Search API.
        /// </summary>
        /// <exception cref="GroupByInc.RetailApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xGroupbyCustomerId">Custom HTTP header which may contain tenant name. Used to define a client by its name.</param>
        /// <param name="facetSearchRequestDto">Request that should be populated to configure a search API call, made by the client on behalf of a shopper. Contains original request and information about facet for which extra keys requested.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FacetSearchResponseDto</returns>
        public FacetSearchResponseDto FacetSearch(string xGroupbyCustomerId, FacetSearchRequestDto facetSearchRequestDto, int operationIndex = 0)
        {
            GroupByInc.RetailApi.Client.Client.ApiResponse<FacetSearchResponseDto> localVarResponse = FacetSearchWithHttpInfo(xGroupbyCustomerId, facetSearchRequestDto);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Provided search functionality Perform a facet search against the GroupBy Retail Search API.
        /// </summary>
        /// <exception cref="GroupByInc.RetailApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xGroupbyCustomerId">Custom HTTP header which may contain tenant name. Used to define a client by its name.</param>
        /// <param name="facetSearchRequestDto">Request that should be populated to configure a search API call, made by the client on behalf of a shopper. Contains original request and information about facet for which extra keys requested.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FacetSearchResponseDto</returns>
        public GroupByInc.RetailApi.Client.Client.ApiResponse<FacetSearchResponseDto> FacetSearchWithHttpInfo(string xGroupbyCustomerId, FacetSearchRequestDto facetSearchRequestDto, int operationIndex = 0)
        {
            // verify the required parameter 'xGroupbyCustomerId' is set
            if (xGroupbyCustomerId == null)
            {
                throw new GroupByInc.RetailApi.Client.Client.ApiException(400, "Missing required parameter 'xGroupbyCustomerId' when calling SearchApi->FacetSearch");
            }

            // verify the required parameter 'facetSearchRequestDto' is set
            if (facetSearchRequestDto == null)
            {
                throw new GroupByInc.RetailApi.Client.Client.ApiException(400, "Missing required parameter 'facetSearchRequestDto' when calling SearchApi->FacetSearch");
            }

            GroupByInc.RetailApi.Client.Client.RequestOptions localVarRequestOptions = new GroupByInc.RetailApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GroupByInc.RetailApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupByInc.RetailApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("X-Groupby-Customer-Id", GroupByInc.RetailApi.Client.Client.ClientUtils.ParameterToString(xGroupbyCustomerId)); // header parameter
            localVarRequestOptions.Data = facetSearchRequestDto;

            localVarRequestOptions.Operation = "SearchApi.FacetSearch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (GroupByIncEmployee) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + GroupByInc.RetailApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (ClientKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<FacetSearchResponseDto>("/api/search/facet", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FacetSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Provided search functionality Perform a facet search against the GroupBy Retail Search API.
        /// </summary>
        /// <exception cref="GroupByInc.RetailApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xGroupbyCustomerId">Custom HTTP header which may contain tenant name. Used to define a client by its name.</param>
        /// <param name="facetSearchRequestDto">Request that should be populated to configure a search API call, made by the client on behalf of a shopper. Contains original request and information about facet for which extra keys requested.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FacetSearchResponseDto</returns>
        public async System.Threading.Tasks.Task<FacetSearchResponseDto> FacetSearchAsync(string xGroupbyCustomerId, FacetSearchRequestDto facetSearchRequestDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            GroupByInc.RetailApi.Client.Client.ApiResponse<FacetSearchResponseDto> localVarResponse = await FacetSearchWithHttpInfoAsync(xGroupbyCustomerId, facetSearchRequestDto, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Provided search functionality Perform a facet search against the GroupBy Retail Search API.
        /// </summary>
        /// <exception cref="GroupByInc.RetailApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xGroupbyCustomerId">Custom HTTP header which may contain tenant name. Used to define a client by its name.</param>
        /// <param name="facetSearchRequestDto">Request that should be populated to configure a search API call, made by the client on behalf of a shopper. Contains original request and information about facet for which extra keys requested.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FacetSearchResponseDto)</returns>
        public async System.Threading.Tasks.Task<GroupByInc.RetailApi.Client.Client.ApiResponse<FacetSearchResponseDto>> FacetSearchWithHttpInfoAsync(string xGroupbyCustomerId, FacetSearchRequestDto facetSearchRequestDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xGroupbyCustomerId' is set
            if (xGroupbyCustomerId == null)
            {
                throw new GroupByInc.RetailApi.Client.Client.ApiException(400, "Missing required parameter 'xGroupbyCustomerId' when calling SearchApi->FacetSearch");
            }

            // verify the required parameter 'facetSearchRequestDto' is set
            if (facetSearchRequestDto == null)
            {
                throw new GroupByInc.RetailApi.Client.Client.ApiException(400, "Missing required parameter 'facetSearchRequestDto' when calling SearchApi->FacetSearch");
            }


            GroupByInc.RetailApi.Client.Client.RequestOptions localVarRequestOptions = new GroupByInc.RetailApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GroupByInc.RetailApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupByInc.RetailApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("X-Groupby-Customer-Id", GroupByInc.RetailApi.Client.Client.ClientUtils.ParameterToString(xGroupbyCustomerId)); // header parameter
            localVarRequestOptions.Data = facetSearchRequestDto;

            localVarRequestOptions.Operation = "SearchApi.FacetSearch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (GroupByIncEmployee) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + GroupByInc.RetailApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (ClientKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<FacetSearchResponseDto>("/api/search/facet", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FacetSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Provided search functionality Perform a search against the GroupBy Retail Search API.
        /// </summary>
        /// <exception cref="GroupByInc.RetailApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xGroupbyCustomerId">Custom HTTP header which may contain tenant name. Used to define a client by its name.</param>
        /// <param name="searchRequestDto">Request that should be populated to configure a search API call, made by the client on behalf of a shopper.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchResponseDto</returns>
        public SearchResponseDto Search(string xGroupbyCustomerId, SearchRequestDto searchRequestDto, int operationIndex = 0)
        {
            GroupByInc.RetailApi.Client.Client.ApiResponse<SearchResponseDto> localVarResponse = SearchWithHttpInfo(xGroupbyCustomerId, searchRequestDto);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Provided search functionality Perform a search against the GroupBy Retail Search API.
        /// </summary>
        /// <exception cref="GroupByInc.RetailApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xGroupbyCustomerId">Custom HTTP header which may contain tenant name. Used to define a client by its name.</param>
        /// <param name="searchRequestDto">Request that should be populated to configure a search API call, made by the client on behalf of a shopper.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchResponseDto</returns>
        public GroupByInc.RetailApi.Client.Client.ApiResponse<SearchResponseDto> SearchWithHttpInfo(string xGroupbyCustomerId, SearchRequestDto searchRequestDto, int operationIndex = 0)
        {
            // verify the required parameter 'xGroupbyCustomerId' is set
            if (xGroupbyCustomerId == null)
            {
                throw new GroupByInc.RetailApi.Client.Client.ApiException(400, "Missing required parameter 'xGroupbyCustomerId' when calling SearchApi->Search");
            }

            // verify the required parameter 'searchRequestDto' is set
            if (searchRequestDto == null)
            {
                throw new GroupByInc.RetailApi.Client.Client.ApiException(400, "Missing required parameter 'searchRequestDto' when calling SearchApi->Search");
            }

            GroupByInc.RetailApi.Client.Client.RequestOptions localVarRequestOptions = new GroupByInc.RetailApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GroupByInc.RetailApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupByInc.RetailApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("X-Groupby-Customer-Id", GroupByInc.RetailApi.Client.Client.ClientUtils.ParameterToString(xGroupbyCustomerId)); // header parameter
            localVarRequestOptions.Data = searchRequestDto;

            localVarRequestOptions.Operation = "SearchApi.Search";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (GroupByIncEmployee) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + GroupByInc.RetailApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (ClientKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SearchResponseDto>("/api/search", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Search", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Provided search functionality Perform a search against the GroupBy Retail Search API.
        /// </summary>
        /// <exception cref="GroupByInc.RetailApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xGroupbyCustomerId">Custom HTTP header which may contain tenant name. Used to define a client by its name.</param>
        /// <param name="searchRequestDto">Request that should be populated to configure a search API call, made by the client on behalf of a shopper.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchResponseDto</returns>
        public async System.Threading.Tasks.Task<SearchResponseDto> SearchAsync(string xGroupbyCustomerId, SearchRequestDto searchRequestDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            GroupByInc.RetailApi.Client.Client.ApiResponse<SearchResponseDto> localVarResponse = await SearchWithHttpInfoAsync(xGroupbyCustomerId, searchRequestDto, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Provided search functionality Perform a search against the GroupBy Retail Search API.
        /// </summary>
        /// <exception cref="GroupByInc.RetailApi.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xGroupbyCustomerId">Custom HTTP header which may contain tenant name. Used to define a client by its name.</param>
        /// <param name="searchRequestDto">Request that should be populated to configure a search API call, made by the client on behalf of a shopper.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchResponseDto)</returns>
        public async System.Threading.Tasks.Task<GroupByInc.RetailApi.Client.Client.ApiResponse<SearchResponseDto>> SearchWithHttpInfoAsync(string xGroupbyCustomerId, SearchRequestDto searchRequestDto, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xGroupbyCustomerId' is set
            if (xGroupbyCustomerId == null)
            {
                throw new GroupByInc.RetailApi.Client.Client.ApiException(400, "Missing required parameter 'xGroupbyCustomerId' when calling SearchApi->Search");
            }

            // verify the required parameter 'searchRequestDto' is set
            if (searchRequestDto == null)
            {
                throw new GroupByInc.RetailApi.Client.Client.ApiException(400, "Missing required parameter 'searchRequestDto' when calling SearchApi->Search");
            }


            GroupByInc.RetailApi.Client.Client.RequestOptions localVarRequestOptions = new GroupByInc.RetailApi.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = GroupByInc.RetailApi.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupByInc.RetailApi.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("X-Groupby-Customer-Id", GroupByInc.RetailApi.Client.Client.ClientUtils.ParameterToString(xGroupbyCustomerId)); // header parameter
            localVarRequestOptions.Data = searchRequestDto;

            localVarRequestOptions.Operation = "SearchApi.Search";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (GroupByIncEmployee) required
            // http basic authentication required
            if (!string.IsNullOrEmpty(this.Configuration.Username) || !string.IsNullOrEmpty(this.Configuration.Password) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + GroupByInc.RetailApi.Client.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }
            // authentication (ClientKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SearchResponseDto>("/api/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Search", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
