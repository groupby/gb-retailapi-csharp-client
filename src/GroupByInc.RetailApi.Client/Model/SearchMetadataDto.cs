/*
 * GroupBy Retail
 *
 * GroupBy Retail API
 *
 * The version of the OpenAPI document: 0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = GroupByInc.RetailApi.Client.Client.OpenAPIDateConverter;

namespace GroupByInc.RetailApi.Client.Model
{
    /// <summary>
    /// Metadata relating to the search results, or how they were generated.
    /// </summary>
    [DataContract(Name = "SearchMetadataDto")]
    public partial class SearchMetadataDto : IEquatable<SearchMetadataDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchMetadataDto" /> class.
        /// </summary>
        /// <param name="searchAttributionToken">Token to assist beacon collectors in correlating searches to user events..</param>
        /// <param name="cached">Were the search results from a previous call..</param>
        /// <param name="totalTime">Total time spent performing the Google search in milliseconds..</param>
        public SearchMetadataDto(string searchAttributionToken = default(string), bool cached = default(bool), long totalTime = default(long))
        {
            this.SearchAttributionToken = searchAttributionToken;
            this.Cached = cached;
            this.TotalTime = totalTime;
        }

        /// <summary>
        /// Token to assist beacon collectors in correlating searches to user events.
        /// </summary>
        /// <value>Token to assist beacon collectors in correlating searches to user events.</value>
        /// <example>NtQKDAjYrrGEBhCWs_v3AhABGiQ2MDlhNjA5Yy0wMDAwLTI2ZDctODQ0OS1mNGY1ZTgwODc1YjQ</example>
        [DataMember(Name = "searchAttributionToken", EmitDefaultValue = true)]
        public string SearchAttributionToken { get; set; }

        /// <summary>
        /// Were the search results from a previous call.
        /// </summary>
        /// <value>Were the search results from a previous call.</value>
        /// <example>false</example>
        [DataMember(Name = "cached", EmitDefaultValue = true)]
        public bool Cached { get; set; }

        /// <summary>
        /// Total time spent performing the Google search in milliseconds.
        /// </summary>
        /// <value>Total time spent performing the Google search in milliseconds.</value>
        /// <example>153</example>
        [DataMember(Name = "totalTime", EmitDefaultValue = false)]
        public long TotalTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SearchMetadataDto {\n");
            sb.Append("  SearchAttributionToken: ").Append(SearchAttributionToken).Append("\n");
            sb.Append("  Cached: ").Append(Cached).Append("\n");
            sb.Append("  TotalTime: ").Append(TotalTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SearchMetadataDto);
        }

        /// <summary>
        /// Returns true if SearchMetadataDto instances are equal
        /// </summary>
        /// <param name="input">Instance of SearchMetadataDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SearchMetadataDto input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SearchAttributionToken == input.SearchAttributionToken ||
                    (this.SearchAttributionToken != null &&
                    this.SearchAttributionToken.Equals(input.SearchAttributionToken))
                ) && 
                (
                    this.Cached == input.Cached ||
                    this.Cached.Equals(input.Cached)
                ) && 
                (
                    this.TotalTime == input.TotalTime ||
                    this.TotalTime.Equals(input.TotalTime)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SearchAttributionToken != null)
                {
                    hashCode = (hashCode * 59) + this.SearchAttributionToken.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Cached.GetHashCode();
                hashCode = (hashCode * 59) + this.TotalTime.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
