/*
 * GroupBy Retail
 *
 * GroupBy Retail API
 *
 * The version of the OpenAPI document: 0.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = GroupByInc.RetailApi.Client.Client.OpenAPIDateConverter;

namespace GroupByInc.RetailApi.Client.Model
{
    /// <summary>
    /// Object which is represent autocomplete request and encapsulate all passed parameters. 
    /// </summary>
    [DataContract(Name = "Request")]
    public partial class Request : IEquatable<Request>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Request" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Request() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Request" /> class.
        /// </summary>
        /// <param name="area">Area i.e. &#39;Production&#39; Will not be used immediately. This will be useful when we eventually need to support a US area vs a Canada area. But this would require using the custom dataset instead of user-generated. (required).</param>
        /// <param name="collection">Name of the collection used to determine the retail backend to use. Usually it is name which is associated with retail project in command center (project configuration). (required).</param>
        /// <param name="searchItems">Completion max suggestions. The maximum allowed max suggestions is 20. (required).</param>
        /// <param name="query">String. Required. The query used to generate suggestions. The maximum number of allowed characters is 255. (required).</param>
        /// <param name="enableAttributeSuggestion">Enable attribute suggestions, by setting the field enableAttributeSuggestion&#x3D;true in the API request. Then in response, there will be an additional field attributeResults to show direct match results on brands/categories  Note that attribute results directly come from the products we import and Google does not apply any cleaning on them. .</param>
        /// <param name="extendedSuggestions">Optional param which is define if extended suggestions will be returned in autocomplete response or not. Possibly values: true, false, not specified (If not specified default collection setting will be used). .</param>
        /// <param name="extendedAttributes">    List with extended attributes which are would be returned in autocomplete response.     Requires extendedSuggestions to be enabled using search param or on collection layer. .</param>
        /// <param name="visitorId">String. Not required field. A unique identifier for tracking visitors. For example, this could be implemented with an HTTP cookie, which should be able to uniquely identify a visitor on a single device. This unique identifier should not change if the visitor logs in or out of the website. The field must be a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an INVALID_ARGUMENT error is returned. .</param>
        /// <param name="site">Name of site filter. If not specified, the specified area&#39;s default site will be applied if configured in Command Center. To not use default specify empty value i.e.\&quot;\&quot;.  If the site doesn&#39;t exist then the search will execute without the site filter..</param>
        public Request(string area = default(string), string collection = default(string), int searchItems = default(int), string query = default(string), bool enableAttributeSuggestion = default(bool), bool? extendedSuggestions = default(bool?), List<string> extendedAttributes = default(List<string>), string visitorId = default(string), string site = default(string))
        {
            // to ensure "area" is required (not null)
            if (area == null)
            {
                throw new ArgumentNullException("area is a required property for Request and cannot be null");
            }
            this.Area = area;
            // to ensure "collection" is required (not null)
            if (collection == null)
            {
                throw new ArgumentNullException("collection is a required property for Request and cannot be null");
            }
            this.Collection = collection;
            this.SearchItems = searchItems;
            // to ensure "query" is required (not null)
            if (query == null)
            {
                throw new ArgumentNullException("query is a required property for Request and cannot be null");
            }
            this.Query = query;
            this.EnableAttributeSuggestion = enableAttributeSuggestion;
            this.ExtendedSuggestions = extendedSuggestions;
            this.ExtendedAttributes = extendedAttributes;
            this.VisitorId = visitorId;
            this.Site = site;
        }

        /// <summary>
        /// Area i.e. &#39;Production&#39; Will not be used immediately. This will be useful when we eventually need to support a US area vs a Canada area. But this would require using the custom dataset instead of user-generated.
        /// </summary>
        /// <value>Area i.e. &#39;Production&#39; Will not be used immediately. This will be useful when we eventually need to support a US area vs a Canada area. But this would require using the custom dataset instead of user-generated.</value>
        [DataMember(Name = "area", IsRequired = true, EmitDefaultValue = true)]
        public string Area { get; set; }

        /// <summary>
        /// Name of the collection used to determine the retail backend to use. Usually it is name which is associated with retail project in command center (project configuration).
        /// </summary>
        /// <value>Name of the collection used to determine the retail backend to use. Usually it is name which is associated with retail project in command center (project configuration).</value>
        [DataMember(Name = "collection", IsRequired = true, EmitDefaultValue = true)]
        public string Collection { get; set; }

        /// <summary>
        /// Completion max suggestions. The maximum allowed max suggestions is 20.
        /// </summary>
        /// <value>Completion max suggestions. The maximum allowed max suggestions is 20.</value>
        [DataMember(Name = "searchItems", IsRequired = true, EmitDefaultValue = true)]
        public int SearchItems { get; set; }

        /// <summary>
        /// String. Required. The query used to generate suggestions. The maximum number of allowed characters is 255.
        /// </summary>
        /// <value>String. Required. The query used to generate suggestions. The maximum number of allowed characters is 255.</value>
        [DataMember(Name = "query", IsRequired = true, EmitDefaultValue = true)]
        public string Query { get; set; }

        /// <summary>
        /// Enable attribute suggestions, by setting the field enableAttributeSuggestion&#x3D;true in the API request. Then in response, there will be an additional field attributeResults to show direct match results on brands/categories  Note that attribute results directly come from the products we import and Google does not apply any cleaning on them. 
        /// </summary>
        /// <value>Enable attribute suggestions, by setting the field enableAttributeSuggestion&#x3D;true in the API request. Then in response, there will be an additional field attributeResults to show direct match results on brands/categories  Note that attribute results directly come from the products we import and Google does not apply any cleaning on them. </value>
        [DataMember(Name = "enableAttributeSuggestion", EmitDefaultValue = true)]
        public bool EnableAttributeSuggestion { get; set; }

        /// <summary>
        /// Optional param which is define if extended suggestions will be returned in autocomplete response or not. Possibly values: true, false, not specified (If not specified default collection setting will be used). 
        /// </summary>
        /// <value>Optional param which is define if extended suggestions will be returned in autocomplete response or not. Possibly values: true, false, not specified (If not specified default collection setting will be used). </value>
        [DataMember(Name = "extendedSuggestions", EmitDefaultValue = true)]
        public bool? ExtendedSuggestions { get; set; }

        /// <summary>
        ///     List with extended attributes which are would be returned in autocomplete response.     Requires extendedSuggestions to be enabled using search param or on collection layer. 
        /// </summary>
        /// <value>    List with extended attributes which are would be returned in autocomplete response.     Requires extendedSuggestions to be enabled using search param or on collection layer. </value>
        [DataMember(Name = "extendedAttributes", EmitDefaultValue = true)]
        public List<string> ExtendedAttributes { get; set; }

        /// <summary>
        /// String. Not required field. A unique identifier for tracking visitors. For example, this could be implemented with an HTTP cookie, which should be able to uniquely identify a visitor on a single device. This unique identifier should not change if the visitor logs in or out of the website. The field must be a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an INVALID_ARGUMENT error is returned. 
        /// </summary>
        /// <value>String. Not required field. A unique identifier for tracking visitors. For example, this could be implemented with an HTTP cookie, which should be able to uniquely identify a visitor on a single device. This unique identifier should not change if the visitor logs in or out of the website. The field must be a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an INVALID_ARGUMENT error is returned. </value>
        [DataMember(Name = "visitorId", EmitDefaultValue = true)]
        public string VisitorId { get; set; }

        /// <summary>
        /// Name of site filter. If not specified, the specified area&#39;s default site will be applied if configured in Command Center. To not use default specify empty value i.e.\&quot;\&quot;.  If the site doesn&#39;t exist then the search will execute without the site filter.
        /// </summary>
        /// <value>Name of site filter. If not specified, the specified area&#39;s default site will be applied if configured in Command Center. To not use default specify empty value i.e.\&quot;\&quot;.  If the site doesn&#39;t exist then the search will execute without the site filter.</value>
        [DataMember(Name = "site", EmitDefaultValue = true)]
        public string Site { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Request {\n");
            sb.Append("  Area: ").Append(Area).Append("\n");
            sb.Append("  Collection: ").Append(Collection).Append("\n");
            sb.Append("  SearchItems: ").Append(SearchItems).Append("\n");
            sb.Append("  Query: ").Append(Query).Append("\n");
            sb.Append("  EnableAttributeSuggestion: ").Append(EnableAttributeSuggestion).Append("\n");
            sb.Append("  ExtendedSuggestions: ").Append(ExtendedSuggestions).Append("\n");
            sb.Append("  ExtendedAttributes: ").Append(ExtendedAttributes).Append("\n");
            sb.Append("  VisitorId: ").Append(VisitorId).Append("\n");
            sb.Append("  Site: ").Append(Site).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Request);
        }

        /// <summary>
        /// Returns true if Request instances are equal
        /// </summary>
        /// <param name="input">Instance of Request to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Request input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Area == input.Area ||
                    (this.Area != null &&
                    this.Area.Equals(input.Area))
                ) && 
                (
                    this.Collection == input.Collection ||
                    (this.Collection != null &&
                    this.Collection.Equals(input.Collection))
                ) && 
                (
                    this.SearchItems == input.SearchItems ||
                    this.SearchItems.Equals(input.SearchItems)
                ) && 
                (
                    this.Query == input.Query ||
                    (this.Query != null &&
                    this.Query.Equals(input.Query))
                ) && 
                (
                    this.EnableAttributeSuggestion == input.EnableAttributeSuggestion ||
                    this.EnableAttributeSuggestion.Equals(input.EnableAttributeSuggestion)
                ) && 
                (
                    this.ExtendedSuggestions == input.ExtendedSuggestions ||
                    (this.ExtendedSuggestions != null &&
                    this.ExtendedSuggestions.Equals(input.ExtendedSuggestions))
                ) && 
                (
                    this.ExtendedAttributes == input.ExtendedAttributes ||
                    this.ExtendedAttributes != null &&
                    input.ExtendedAttributes != null &&
                    this.ExtendedAttributes.SequenceEqual(input.ExtendedAttributes)
                ) && 
                (
                    this.VisitorId == input.VisitorId ||
                    (this.VisitorId != null &&
                    this.VisitorId.Equals(input.VisitorId))
                ) && 
                (
                    this.Site == input.Site ||
                    (this.Site != null &&
                    this.Site.Equals(input.Site))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Area != null)
                {
                    hashCode = (hashCode * 59) + this.Area.GetHashCode();
                }
                if (this.Collection != null)
                {
                    hashCode = (hashCode * 59) + this.Collection.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SearchItems.GetHashCode();
                if (this.Query != null)
                {
                    hashCode = (hashCode * 59) + this.Query.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EnableAttributeSuggestion.GetHashCode();
                if (this.ExtendedSuggestions != null)
                {
                    hashCode = (hashCode * 59) + this.ExtendedSuggestions.GetHashCode();
                }
                if (this.ExtendedAttributes != null)
                {
                    hashCode = (hashCode * 59) + this.ExtendedAttributes.GetHashCode();
                }
                if (this.VisitorId != null)
                {
                    hashCode = (hashCode * 59) + this.VisitorId.GetHashCode();
                }
                if (this.Site != null)
                {
                    hashCode = (hashCode * 59) + this.Site.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Area (string) maxLength
            if (this.Area != null && this.Area.Length > 80)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Area, length must be less than 80.", new [] { "Area" });
            }

            // Collection (string) maxLength
            if (this.Collection != null && this.Collection.Length > 80)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Collection, length must be less than 80.", new [] { "Collection" });
            }

            // Collection (string) minLength
            if (this.Collection != null && this.Collection.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Collection, length must be greater than 1.", new [] { "Collection" });
            }

            // SearchItems (int) maximum
            if (this.SearchItems > (int)20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SearchItems, must be a value less than or equal to 20.", new [] { "SearchItems" });
            }

            // SearchItems (int) minimum
            if (this.SearchItems < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SearchItems, must be a value greater than or equal to 1.", new [] { "SearchItems" });
            }

            // Query (string) maxLength
            if (this.Query != null && this.Query.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Query, length must be less than 255.", new [] { "Query" });
            }

            // Query (string) minLength
            if (this.Query != null && this.Query.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Query, length must be greater than 1.", new [] { "Query" });
            }

            // VisitorId (string) maxLength
            if (this.VisitorId != null && this.VisitorId.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for VisitorId, length must be less than 128.", new [] { "VisitorId" });
            }

            yield break;
        }
    }

}
