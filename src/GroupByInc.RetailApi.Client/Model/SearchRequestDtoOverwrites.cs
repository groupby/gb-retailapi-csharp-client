/*
 * GroupBy Retail
 *
 * GroupBy Retail API
 *
 * The version of the OpenAPI document: 0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = GroupByInc.RetailApi.Client.Client.OpenAPIDateConverter;

namespace GroupByInc.RetailApi.Client.Model
{
    /// <summary>
    /// SearchRequestDtoOverwrites
    /// </summary>
    [DataContract(Name = "SearchRequestDto_overwrites")]
    public partial class SearchRequestDtoOverwrites : IEquatable<SearchRequestDtoOverwrites>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchRequestDtoOverwrites" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SearchRequestDtoOverwrites() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchRequestDtoOverwrites" /> class.
        /// </summary>
        /// <param name="rules">rules (required).</param>
        public SearchRequestDtoOverwrites(List<RuleConfiguration> rules = default(List<RuleConfiguration>))
        {
            // to ensure "rules" is required (not null)
            if (rules == null)
            {
                throw new ArgumentNullException("rules is a required property for SearchRequestDtoOverwrites and cannot be null");
            }
            this.Rules = rules;
        }

        /// <summary>
        /// Gets or Sets Rules
        /// </summary>
        [DataMember(Name = "rules", IsRequired = true, EmitDefaultValue = true)]
        public List<RuleConfiguration> Rules { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SearchRequestDtoOverwrites {\n");
            sb.Append("  Rules: ").Append(Rules).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SearchRequestDtoOverwrites);
        }

        /// <summary>
        /// Returns true if SearchRequestDtoOverwrites instances are equal
        /// </summary>
        /// <param name="input">Instance of SearchRequestDtoOverwrites to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SearchRequestDtoOverwrites input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Rules == input.Rules ||
                    this.Rules != null &&
                    input.Rules != null &&
                    this.Rules.SequenceEqual(input.Rules)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Rules != null)
                {
                    hashCode = (hashCode * 59) + this.Rules.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
