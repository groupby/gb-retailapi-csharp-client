/*
 * GroupBy Retail
 *
 * GroupBy Retail API
 *
 * The version of the OpenAPI document: 0.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = GroupByInc.RetailApi.Client.Client.OpenAPIDateConverter;

namespace GroupByInc.RetailApi.Client.Model
{
    /// <summary>
    /// Facet search response representation.
    /// </summary>
    [DataContract(Name = "FacetSearchResponseDto")]
    public partial class FacetSearchResponseDto : IEquatable<FacetSearchResponseDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FacetSearchResponseDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FacetSearchResponseDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FacetSearchResponseDto" /> class.
        /// </summary>
        /// <param name="originalRequest">originalRequest (required).</param>
        /// <param name="availableNavigation">availableNavigation (required).</param>
        public FacetSearchResponseDto(SearchRequestDto originalRequest = default(SearchRequestDto), NavigationDto availableNavigation = default(NavigationDto))
        {
            // to ensure "originalRequest" is required (not null)
            if (originalRequest == null)
            {
                throw new ArgumentNullException("originalRequest is a required property for FacetSearchResponseDto and cannot be null");
            }
            this.OriginalRequest = originalRequest;
            // to ensure "availableNavigation" is required (not null)
            if (availableNavigation == null)
            {
                throw new ArgumentNullException("availableNavigation is a required property for FacetSearchResponseDto and cannot be null");
            }
            this.AvailableNavigation = availableNavigation;
        }

        /// <summary>
        /// Gets or Sets OriginalRequest
        /// </summary>
        [DataMember(Name = "originalRequest", IsRequired = true, EmitDefaultValue = true)]
        public SearchRequestDto OriginalRequest { get; set; }

        /// <summary>
        /// Gets or Sets AvailableNavigation
        /// </summary>
        [DataMember(Name = "availableNavigation", IsRequired = true, EmitDefaultValue = true)]
        public NavigationDto AvailableNavigation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FacetSearchResponseDto {\n");
            sb.Append("  OriginalRequest: ").Append(OriginalRequest).Append("\n");
            sb.Append("  AvailableNavigation: ").Append(AvailableNavigation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FacetSearchResponseDto);
        }

        /// <summary>
        /// Returns true if FacetSearchResponseDto instances are equal
        /// </summary>
        /// <param name="input">Instance of FacetSearchResponseDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FacetSearchResponseDto input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.OriginalRequest == input.OriginalRequest ||
                    (this.OriginalRequest != null &&
                    this.OriginalRequest.Equals(input.OriginalRequest))
                ) && 
                (
                    this.AvailableNavigation == input.AvailableNavigation ||
                    (this.AvailableNavigation != null &&
                    this.AvailableNavigation.Equals(input.AvailableNavigation))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OriginalRequest != null)
                {
                    hashCode = (hashCode * 59) + this.OriginalRequest.GetHashCode();
                }
                if (this.AvailableNavigation != null)
                {
                    hashCode = (hashCode * 59) + this.AvailableNavigation.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
