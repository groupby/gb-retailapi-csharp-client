/*
 * GroupBy Retail
 *
 * GroupBy Retail API
 *
 * The version of the OpenAPI document: 0.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = GroupByInc.RetailApi.Client.Client.OpenAPIDateConverter;

namespace GroupByInc.RetailApi.Client.Model
{
    /// <summary>
    /// Biases the search results to either increase or decrease product relevancy for products that match the given field and content.
    /// </summary>
    [DataContract(Name = "BiasDto")]
    public partial class BiasDto : IEquatable<BiasDto>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Strength
        /// </summary>
        [DataMember(Name = "strength", IsRequired = true, EmitDefaultValue = true)]
        public BiasDtoStrengthDto Strength { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BiasDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BiasDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BiasDto" /> class.
        /// </summary>
        /// <param name="field">The field the bias refers to. (required).</param>
        /// <param name="content">The content the field must match for the bias to be applied..</param>
        /// <param name="strength">strength (required).</param>
        public BiasDto(string field = default(string), string content = default(string), BiasDtoStrengthDto strength = default(BiasDtoStrengthDto))
        {
            // to ensure "field" is required (not null)
            if (field == null)
            {
                throw new ArgumentNullException("field is a required property for BiasDto and cannot be null");
            }
            this.Field = field;
            this.Strength = strength;
            this.Content = content;
        }

        /// <summary>
        /// The field the bias refers to.
        /// </summary>
        /// <value>The field the bias refers to.</value>
        /// <example>colorFamilies</example>
        [DataMember(Name = "field", IsRequired = true, EmitDefaultValue = true)]
        public string Field { get; set; }

        /// <summary>
        /// The content the field must match for the bias to be applied.
        /// </summary>
        /// <value>The content the field must match for the bias to be applied.</value>
        /// <example>Red</example>
        [DataMember(Name = "content", EmitDefaultValue = true)]
        public string Content { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BiasDto {\n");
            sb.Append("  Field: ").Append(Field).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  Strength: ").Append(Strength).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BiasDto);
        }

        /// <summary>
        /// Returns true if BiasDto instances are equal
        /// </summary>
        /// <param name="input">Instance of BiasDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BiasDto input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Field == input.Field ||
                    (this.Field != null &&
                    this.Field.Equals(input.Field))
                ) && 
                (
                    this.Content == input.Content ||
                    (this.Content != null &&
                    this.Content.Equals(input.Content))
                ) && 
                (
                    this.Strength == input.Strength ||
                    this.Strength.Equals(input.Strength)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Field != null)
                {
                    hashCode = (hashCode * 59) + this.Field.GetHashCode();
                }
                if (this.Content != null)
                {
                    hashCode = (hashCode * 59) + this.Content.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Strength.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
