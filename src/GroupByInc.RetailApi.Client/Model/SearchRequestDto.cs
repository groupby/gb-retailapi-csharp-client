/*
 * GroupBy Retail
 *
 * GroupBy Retail API
 *
 * The version of the OpenAPI document: 0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = GroupByInc.RetailApi.Client.Client.OpenAPIDateConverter;

namespace GroupByInc.RetailApi.Client.Model
{
    /// <summary>
    /// Request that should be populated to configure a search API call, made by the client on behalf of a shopper.
    /// </summary>
    [DataContract(Name = "SearchRequestDto")]
    public partial class SearchRequestDto : IEquatable<SearchRequestDto>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets SpellCorrectionMode
        /// </summary>
        [DataMember(Name = "spellCorrectionMode", EmitDefaultValue = true)]
        public SpellCorrectionMode? SpellCorrectionMode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchRequestDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SearchRequestDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchRequestDto" /> class.
        /// </summary>
        /// <param name="query">Base textual search query..</param>
        /// <param name="area">Area name the search is being performed in. (default to &quot;Production&quot;).</param>
        /// <param name="collection">Name of collection in project configuration setting which is mapped to the google retail backend. (default to &quot;default&quot;).</param>
        /// <param name="visitorId">Unique identifier identifying the shopper. Will be autogenerated if not provided..</param>
        /// <param name="refinements">refinements (required).</param>
        /// <param name="pageSize">The number of products to be returned on each page. (default to 10).</param>
        /// <param name="skip">Where in the list of products to begin the page. (default to 0).</param>
        /// <param name="biasingProfile">Name of a biasing profile which should be applied to the search. Takes priority over area default..</param>
        /// <param name="biasing">biasing (required).</param>
        /// <param name="customUrlParams">customUrlParams (required).</param>
        /// <param name="sorts">sorts (required).</param>
        /// <param name="includedNavigations">Set of navigation fields to include in the search result. Cannot be set if &#39;excludedNavigations&#39; is set..</param>
        /// <param name="excludedNavigations">Set of navigation fields to exclude in the search result. Cannot be set if &#39;includedNavigations&#39; is set..</param>
        /// <param name="dynamicFacet">Set the specifications of dynamically generated facets..</param>
        /// <param name="variantRollupKeys">Set the variant rollup keys..</param>
        /// <param name="preFilter">Set of the prefilter specifications value..</param>
        /// <param name="site">Name of site filter. If not specified, the specified area&#39;s default site will be applied if configured in Command Center. To not use default specify empty value i.e.\&quot;\&quot;.  If the site doesn&#39;t exist then the search will execute without the site filter and a warning will be provided..</param>
        /// <param name="responseMask">List with fields which should be included in metadata object associated with each record in response..</param>
        /// <param name="pageCategories">The categories associated with a category page. Required for category navigation queries to achieve good search quality. To represent full path of category, use &#39;&gt;&#39; sign to separate different hierarchies. If &#39;&gt;&#39; is part of the category name, please replace it with other character(s).Max item length &#x3D; 1..</param>
        /// <param name="spellCorrectionMode">spellCorrectionMode.</param>
        /// <param name="includeExpandedResults">When a shopper uses an ambiguous or a multi-word search phrase, they can get an empty response. After turning on include expanded results, Retail Search analyzes the request and returns the expanded list of products based on the parsed search query. For example, if you search \&quot;Google Pixel 5\&quot; without query expansion, you might only get \&quot;google_pixel_5\&quot; in the result. With query expansion, you might get \&quot;google_pixel_4a_with_5g\&quot;, \&quot;google_pixel_4a\&quot; and \&quot;google_pixel_5_case\&quot; as well.The default value is configured in the tenant settings or true if there is no such setting.</param>
        /// <param name="pinUnexpandedResults">This configuration depends on include expanded results settings. If this field is set to true,unexpanded products are always at the top of the search results, followed  by the expanded results. Default value: true.</param>
        /// <param name="debug">Enable additional debug info in response.  Note: attaching debug info significantly affects performance. Is not supposed to be used for large requests.  .</param>
        /// <param name="facetLimit">Maximum of facet values that should be returned for this facet. If not specified, defaults to 20. The maximum allowed value is 300. Values above 300 will be coerced to 300.  If this field is negative, an INVALID_ARGUMENT is returned.  This limit (300) is configured on Google side, but Google have an ability to change it for specific project. .</param>
        /// <param name="loginId">Highly recommended for logged-in users. Unique identifier for logged-in user, such as a user name. Don&#39;t set for anonymous users.  Don&#39;t set the field to the same fixed ID for different users. This mixes the event history of those users together, which results in degraded model quality.  The field must be a UTF-8 encoded string with a length limit of 128 characters. .</param>
        /// <param name="overwrites">overwrites.</param>
        public SearchRequestDto(string query = default(string), string area = @"Production", string collection = @"default", string visitorId = default(string), List<SelectedRefinementDto> refinements = default(List<SelectedRefinementDto>), int? pageSize = 10, long? skip = 0, string biasingProfile = default(string), BiasingProfileDto biasing = default(BiasingProfileDto), List<CustomParameterDto> customUrlParams = default(List<CustomParameterDto>), List<SortDto> sorts = default(List<SortDto>), List<string> includedNavigations = default(List<string>), List<string> excludedNavigations = default(List<string>), bool? dynamicFacet = default(bool?), List<string> variantRollupKeys = default(List<string>), string preFilter = default(string), string site = default(string), List<string> responseMask = default(List<string>), List<string> pageCategories = default(List<string>), SpellCorrectionMode? spellCorrectionMode = default(SpellCorrectionMode?), bool? includeExpandedResults = default(bool?), bool? pinUnexpandedResults = default(bool?), bool? debug = default(bool?), int? facetLimit = default(int?), string loginId = default(string), SearchRequestDtoOverwrites overwrites = default(SearchRequestDtoOverwrites))
        {
            // to ensure "refinements" is required (not null)
            if (refinements == null)
            {
                throw new ArgumentNullException("refinements is a required property for SearchRequestDto and cannot be null");
            }
            this.Refinements = refinements;
            // to ensure "biasing" is required (not null)
            if (biasing == null)
            {
                throw new ArgumentNullException("biasing is a required property for SearchRequestDto and cannot be null");
            }
            this.Biasing = biasing;
            // to ensure "customUrlParams" is required (not null)
            if (customUrlParams == null)
            {
                throw new ArgumentNullException("customUrlParams is a required property for SearchRequestDto and cannot be null");
            }
            this.CustomUrlParams = customUrlParams;
            // to ensure "sorts" is required (not null)
            if (sorts == null)
            {
                throw new ArgumentNullException("sorts is a required property for SearchRequestDto and cannot be null");
            }
            this.Sorts = sorts;
            this.Query = query;
            // use default value if no "area" provided
            this.Area = area ?? @"Production";
            // use default value if no "collection" provided
            this.Collection = collection ?? @"default";
            this.VisitorId = visitorId;
            // use default value if no "pageSize" provided
            this.PageSize = pageSize ?? 10;
            // use default value if no "skip" provided
            this.Skip = skip ?? 0;
            this.BiasingProfile = biasingProfile;
            this.IncludedNavigations = includedNavigations;
            this.ExcludedNavigations = excludedNavigations;
            this.DynamicFacet = dynamicFacet;
            this.VariantRollupKeys = variantRollupKeys;
            this.PreFilter = preFilter;
            this.Site = site;
            this.ResponseMask = responseMask;
            this.PageCategories = pageCategories;
            this.SpellCorrectionMode = spellCorrectionMode;
            this.IncludeExpandedResults = includeExpandedResults;
            this.PinUnexpandedResults = pinUnexpandedResults;
            this.Debug = debug;
            this.FacetLimit = facetLimit;
            this.LoginId = loginId;
            this.Overwrites = overwrites;
        }

        /// <summary>
        /// Base textual search query.
        /// </summary>
        /// <value>Base textual search query.</value>
        /// <example>blue sweater</example>
        [DataMember(Name = "query", EmitDefaultValue = true)]
        public string Query { get; set; }

        /// <summary>
        /// Area name the search is being performed in.
        /// </summary>
        /// <value>Area name the search is being performed in.</value>
        /// <example>Production</example>
        [DataMember(Name = "area", EmitDefaultValue = true)]
        public string Area { get; set; }

        /// <summary>
        /// Name of collection in project configuration setting which is mapped to the google retail backend.
        /// </summary>
        /// <value>Name of collection in project configuration setting which is mapped to the google retail backend.</value>
        /// <example>productsClothing</example>
        [DataMember(Name = "collection", EmitDefaultValue = true)]
        public string Collection { get; set; }

        /// <summary>
        /// Unique identifier identifying the shopper. Will be autogenerated if not provided.
        /// </summary>
        /// <value>Unique identifier identifying the shopper. Will be autogenerated if not provided.</value>
        /// <example>38400000-8cf0-11bd-b23e-10b96e40000d</example>
        [DataMember(Name = "visitorId", EmitDefaultValue = true)]
        public string VisitorId { get; set; }

        /// <summary>
        /// Gets or Sets Refinements
        /// </summary>
        [DataMember(Name = "refinements", IsRequired = true, EmitDefaultValue = true)]
        public List<SelectedRefinementDto> Refinements { get; set; }

        /// <summary>
        /// The number of products to be returned on each page.
        /// </summary>
        /// <value>The number of products to be returned on each page.</value>
        /// <example>25</example>
        [DataMember(Name = "pageSize", EmitDefaultValue = true)]
        public int? PageSize { get; set; }

        /// <summary>
        /// Where in the list of products to begin the page.
        /// </summary>
        /// <value>Where in the list of products to begin the page.</value>
        /// <example>50</example>
        [DataMember(Name = "skip", EmitDefaultValue = true)]
        public long? Skip { get; set; }

        /// <summary>
        /// Name of a biasing profile which should be applied to the search. Takes priority over area default.
        /// </summary>
        /// <value>Name of a biasing profile which should be applied to the search. Takes priority over area default.</value>
        [DataMember(Name = "biasingProfile", EmitDefaultValue = true)]
        public string BiasingProfile { get; set; }

        /// <summary>
        /// Gets or Sets Biasing
        /// </summary>
        [DataMember(Name = "biasing", IsRequired = true, EmitDefaultValue = true)]
        public BiasingProfileDto Biasing { get; set; }

        /// <summary>
        /// Gets or Sets CustomUrlParams
        /// </summary>
        [DataMember(Name = "customUrlParams", IsRequired = true, EmitDefaultValue = true)]
        public List<CustomParameterDto> CustomUrlParams { get; set; }

        /// <summary>
        /// Gets or Sets Sorts
        /// </summary>
        [DataMember(Name = "sorts", IsRequired = true, EmitDefaultValue = true)]
        public List<SortDto> Sorts { get; set; }

        /// <summary>
        /// Set of navigation fields to include in the search result. Cannot be set if &#39;excludedNavigations&#39; is set.
        /// </summary>
        /// <value>Set of navigation fields to include in the search result. Cannot be set if &#39;excludedNavigations&#39; is set.</value>
        [DataMember(Name = "includedNavigations", EmitDefaultValue = true)]
        public List<string> IncludedNavigations { get; set; }

        /// <summary>
        /// Set of navigation fields to exclude in the search result. Cannot be set if &#39;includedNavigations&#39; is set.
        /// </summary>
        /// <value>Set of navigation fields to exclude in the search result. Cannot be set if &#39;includedNavigations&#39; is set.</value>
        [DataMember(Name = "excludedNavigations", EmitDefaultValue = true)]
        public List<string> ExcludedNavigations { get; set; }

        /// <summary>
        /// Set the specifications of dynamically generated facets.
        /// </summary>
        /// <value>Set the specifications of dynamically generated facets.</value>
        [DataMember(Name = "dynamicFacet", EmitDefaultValue = true)]
        public bool? DynamicFacet { get; set; }

        /// <summary>
        /// Set the variant rollup keys.
        /// </summary>
        /// <value>Set the variant rollup keys.</value>
        [DataMember(Name = "variantRollupKeys", EmitDefaultValue = true)]
        public List<string> VariantRollupKeys { get; set; }

        /// <summary>
        /// Set of the prefilter specifications value.
        /// </summary>
        /// <value>Set of the prefilter specifications value.</value>
        /// <example>(categories:ANY(&quot;Men&quot;)) AND (ageGroups:ANY(&quot;adult&quot;)) AND (price: IN(150, 200))</example>
        [DataMember(Name = "preFilter", EmitDefaultValue = true)]
        public string PreFilter { get; set; }

        /// <summary>
        /// Name of site filter. If not specified, the specified area&#39;s default site will be applied if configured in Command Center. To not use default specify empty value i.e.\&quot;\&quot;.  If the site doesn&#39;t exist then the search will execute without the site filter and a warning will be provided.
        /// </summary>
        /// <value>Name of site filter. If not specified, the specified area&#39;s default site will be applied if configured in Command Center. To not use default specify empty value i.e.\&quot;\&quot;.  If the site doesn&#39;t exist then the search will execute without the site filter and a warning will be provided.</value>
        [DataMember(Name = "site", EmitDefaultValue = true)]
        public string Site { get; set; }

        /// <summary>
        /// List with fields which should be included in metadata object associated with each record in response.
        /// </summary>
        /// <value>List with fields which should be included in metadata object associated with each record in response.</value>
        /// <example>[&quot;key.innerKey.value&quot;, &quot;key2&quot;, &quot;key.innerKey2.value2&quot;]</example>
        [DataMember(Name = "responseMask", EmitDefaultValue = true)]
        public List<string> ResponseMask { get; set; }

        /// <summary>
        /// The categories associated with a category page. Required for category navigation queries to achieve good search quality. To represent full path of category, use &#39;&gt;&#39; sign to separate different hierarchies. If &#39;&gt;&#39; is part of the category name, please replace it with other character(s).Max item length &#x3D; 1.
        /// </summary>
        /// <value>The categories associated with a category page. Required for category navigation queries to achieve good search quality. To represent full path of category, use &#39;&gt;&#39; sign to separate different hierarchies. If &#39;&gt;&#39; is part of the category name, please replace it with other character(s).Max item length &#x3D; 1.</value>
        /// <example>[&quot;Sales &gt; 2017 Black Friday Deals&quot;]</example>
        [DataMember(Name = "pageCategories", EmitDefaultValue = true)]
        public List<string> PageCategories { get; set; }

        /// <summary>
        /// When a shopper uses an ambiguous or a multi-word search phrase, they can get an empty response. After turning on include expanded results, Retail Search analyzes the request and returns the expanded list of products based on the parsed search query. For example, if you search \&quot;Google Pixel 5\&quot; without query expansion, you might only get \&quot;google_pixel_5\&quot; in the result. With query expansion, you might get \&quot;google_pixel_4a_with_5g\&quot;, \&quot;google_pixel_4a\&quot; and \&quot;google_pixel_5_case\&quot; as well.The default value is configured in the tenant settings or true if there is no such setting
        /// </summary>
        /// <value>When a shopper uses an ambiguous or a multi-word search phrase, they can get an empty response. After turning on include expanded results, Retail Search analyzes the request and returns the expanded list of products based on the parsed search query. For example, if you search \&quot;Google Pixel 5\&quot; without query expansion, you might only get \&quot;google_pixel_5\&quot; in the result. With query expansion, you might get \&quot;google_pixel_4a_with_5g\&quot;, \&quot;google_pixel_4a\&quot; and \&quot;google_pixel_5_case\&quot; as well.The default value is configured in the tenant settings or true if there is no such setting</value>
        [DataMember(Name = "includeExpandedResults", EmitDefaultValue = true)]
        public bool? IncludeExpandedResults { get; set; }

        /// <summary>
        /// This configuration depends on include expanded results settings. If this field is set to true,unexpanded products are always at the top of the search results, followed  by the expanded results. Default value: true
        /// </summary>
        /// <value>This configuration depends on include expanded results settings. If this field is set to true,unexpanded products are always at the top of the search results, followed  by the expanded results. Default value: true</value>
        [DataMember(Name = "pinUnexpandedResults", EmitDefaultValue = true)]
        public bool? PinUnexpandedResults { get; set; }

        /// <summary>
        /// Enable additional debug info in response.  Note: attaching debug info significantly affects performance. Is not supposed to be used for large requests.  
        /// </summary>
        /// <value>Enable additional debug info in response.  Note: attaching debug info significantly affects performance. Is not supposed to be used for large requests.  </value>
        [DataMember(Name = "debug", EmitDefaultValue = true)]
        public bool? Debug { get; set; }

        /// <summary>
        /// Maximum of facet values that should be returned for this facet. If not specified, defaults to 20. The maximum allowed value is 300. Values above 300 will be coerced to 300.  If this field is negative, an INVALID_ARGUMENT is returned.  This limit (300) is configured on Google side, but Google have an ability to change it for specific project. 
        /// </summary>
        /// <value>Maximum of facet values that should be returned for this facet. If not specified, defaults to 20. The maximum allowed value is 300. Values above 300 will be coerced to 300.  If this field is negative, an INVALID_ARGUMENT is returned.  This limit (300) is configured on Google side, but Google have an ability to change it for specific project. </value>
        [DataMember(Name = "facetLimit", EmitDefaultValue = true)]
        public int? FacetLimit { get; set; }

        /// <summary>
        /// Highly recommended for logged-in users. Unique identifier for logged-in user, such as a user name. Don&#39;t set for anonymous users.  Don&#39;t set the field to the same fixed ID for different users. This mixes the event history of those users together, which results in degraded model quality.  The field must be a UTF-8 encoded string with a length limit of 128 characters. 
        /// </summary>
        /// <value>Highly recommended for logged-in users. Unique identifier for logged-in user, such as a user name. Don&#39;t set for anonymous users.  Don&#39;t set the field to the same fixed ID for different users. This mixes the event history of those users together, which results in degraded model quality.  The field must be a UTF-8 encoded string with a length limit of 128 characters. </value>
        [DataMember(Name = "loginId", EmitDefaultValue = true)]
        public string LoginId { get; set; }

        /// <summary>
        /// Gets or Sets Overwrites
        /// </summary>
        [DataMember(Name = "overwrites", EmitDefaultValue = true)]
        public SearchRequestDtoOverwrites Overwrites { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SearchRequestDto {\n");
            sb.Append("  Query: ").Append(Query).Append("\n");
            sb.Append("  Area: ").Append(Area).Append("\n");
            sb.Append("  Collection: ").Append(Collection).Append("\n");
            sb.Append("  VisitorId: ").Append(VisitorId).Append("\n");
            sb.Append("  Refinements: ").Append(Refinements).Append("\n");
            sb.Append("  PageSize: ").Append(PageSize).Append("\n");
            sb.Append("  Skip: ").Append(Skip).Append("\n");
            sb.Append("  BiasingProfile: ").Append(BiasingProfile).Append("\n");
            sb.Append("  Biasing: ").Append(Biasing).Append("\n");
            sb.Append("  CustomUrlParams: ").Append(CustomUrlParams).Append("\n");
            sb.Append("  Sorts: ").Append(Sorts).Append("\n");
            sb.Append("  IncludedNavigations: ").Append(IncludedNavigations).Append("\n");
            sb.Append("  ExcludedNavigations: ").Append(ExcludedNavigations).Append("\n");
            sb.Append("  DynamicFacet: ").Append(DynamicFacet).Append("\n");
            sb.Append("  VariantRollupKeys: ").Append(VariantRollupKeys).Append("\n");
            sb.Append("  PreFilter: ").Append(PreFilter).Append("\n");
            sb.Append("  Site: ").Append(Site).Append("\n");
            sb.Append("  ResponseMask: ").Append(ResponseMask).Append("\n");
            sb.Append("  PageCategories: ").Append(PageCategories).Append("\n");
            sb.Append("  SpellCorrectionMode: ").Append(SpellCorrectionMode).Append("\n");
            sb.Append("  IncludeExpandedResults: ").Append(IncludeExpandedResults).Append("\n");
            sb.Append("  PinUnexpandedResults: ").Append(PinUnexpandedResults).Append("\n");
            sb.Append("  Debug: ").Append(Debug).Append("\n");
            sb.Append("  FacetLimit: ").Append(FacetLimit).Append("\n");
            sb.Append("  LoginId: ").Append(LoginId).Append("\n");
            sb.Append("  Overwrites: ").Append(Overwrites).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SearchRequestDto);
        }

        /// <summary>
        /// Returns true if SearchRequestDto instances are equal
        /// </summary>
        /// <param name="input">Instance of SearchRequestDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SearchRequestDto input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Query == input.Query ||
                    (this.Query != null &&
                    this.Query.Equals(input.Query))
                ) && 
                (
                    this.Area == input.Area ||
                    (this.Area != null &&
                    this.Area.Equals(input.Area))
                ) && 
                (
                    this.Collection == input.Collection ||
                    (this.Collection != null &&
                    this.Collection.Equals(input.Collection))
                ) && 
                (
                    this.VisitorId == input.VisitorId ||
                    (this.VisitorId != null &&
                    this.VisitorId.Equals(input.VisitorId))
                ) && 
                (
                    this.Refinements == input.Refinements ||
                    this.Refinements != null &&
                    input.Refinements != null &&
                    this.Refinements.SequenceEqual(input.Refinements)
                ) && 
                (
                    this.PageSize == input.PageSize ||
                    (this.PageSize != null &&
                    this.PageSize.Equals(input.PageSize))
                ) && 
                (
                    this.Skip == input.Skip ||
                    (this.Skip != null &&
                    this.Skip.Equals(input.Skip))
                ) && 
                (
                    this.BiasingProfile == input.BiasingProfile ||
                    (this.BiasingProfile != null &&
                    this.BiasingProfile.Equals(input.BiasingProfile))
                ) && 
                (
                    this.Biasing == input.Biasing ||
                    (this.Biasing != null &&
                    this.Biasing.Equals(input.Biasing))
                ) && 
                (
                    this.CustomUrlParams == input.CustomUrlParams ||
                    this.CustomUrlParams != null &&
                    input.CustomUrlParams != null &&
                    this.CustomUrlParams.SequenceEqual(input.CustomUrlParams)
                ) && 
                (
                    this.Sorts == input.Sorts ||
                    this.Sorts != null &&
                    input.Sorts != null &&
                    this.Sorts.SequenceEqual(input.Sorts)
                ) && 
                (
                    this.IncludedNavigations == input.IncludedNavigations ||
                    this.IncludedNavigations != null &&
                    input.IncludedNavigations != null &&
                    this.IncludedNavigations.SequenceEqual(input.IncludedNavigations)
                ) && 
                (
                    this.ExcludedNavigations == input.ExcludedNavigations ||
                    this.ExcludedNavigations != null &&
                    input.ExcludedNavigations != null &&
                    this.ExcludedNavigations.SequenceEqual(input.ExcludedNavigations)
                ) && 
                (
                    this.DynamicFacet == input.DynamicFacet ||
                    (this.DynamicFacet != null &&
                    this.DynamicFacet.Equals(input.DynamicFacet))
                ) && 
                (
                    this.VariantRollupKeys == input.VariantRollupKeys ||
                    this.VariantRollupKeys != null &&
                    input.VariantRollupKeys != null &&
                    this.VariantRollupKeys.SequenceEqual(input.VariantRollupKeys)
                ) && 
                (
                    this.PreFilter == input.PreFilter ||
                    (this.PreFilter != null &&
                    this.PreFilter.Equals(input.PreFilter))
                ) && 
                (
                    this.Site == input.Site ||
                    (this.Site != null &&
                    this.Site.Equals(input.Site))
                ) && 
                (
                    this.ResponseMask == input.ResponseMask ||
                    this.ResponseMask != null &&
                    input.ResponseMask != null &&
                    this.ResponseMask.SequenceEqual(input.ResponseMask)
                ) && 
                (
                    this.PageCategories == input.PageCategories ||
                    this.PageCategories != null &&
                    input.PageCategories != null &&
                    this.PageCategories.SequenceEqual(input.PageCategories)
                ) && 
                (
                    this.SpellCorrectionMode == input.SpellCorrectionMode ||
                    this.SpellCorrectionMode.Equals(input.SpellCorrectionMode)
                ) && 
                (
                    this.IncludeExpandedResults == input.IncludeExpandedResults ||
                    (this.IncludeExpandedResults != null &&
                    this.IncludeExpandedResults.Equals(input.IncludeExpandedResults))
                ) && 
                (
                    this.PinUnexpandedResults == input.PinUnexpandedResults ||
                    (this.PinUnexpandedResults != null &&
                    this.PinUnexpandedResults.Equals(input.PinUnexpandedResults))
                ) && 
                (
                    this.Debug == input.Debug ||
                    (this.Debug != null &&
                    this.Debug.Equals(input.Debug))
                ) && 
                (
                    this.FacetLimit == input.FacetLimit ||
                    (this.FacetLimit != null &&
                    this.FacetLimit.Equals(input.FacetLimit))
                ) && 
                (
                    this.LoginId == input.LoginId ||
                    (this.LoginId != null &&
                    this.LoginId.Equals(input.LoginId))
                ) && 
                (
                    this.Overwrites == input.Overwrites ||
                    (this.Overwrites != null &&
                    this.Overwrites.Equals(input.Overwrites))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Query != null)
                {
                    hashCode = (hashCode * 59) + this.Query.GetHashCode();
                }
                if (this.Area != null)
                {
                    hashCode = (hashCode * 59) + this.Area.GetHashCode();
                }
                if (this.Collection != null)
                {
                    hashCode = (hashCode * 59) + this.Collection.GetHashCode();
                }
                if (this.VisitorId != null)
                {
                    hashCode = (hashCode * 59) + this.VisitorId.GetHashCode();
                }
                if (this.Refinements != null)
                {
                    hashCode = (hashCode * 59) + this.Refinements.GetHashCode();
                }
                if (this.PageSize != null)
                {
                    hashCode = (hashCode * 59) + this.PageSize.GetHashCode();
                }
                if (this.Skip != null)
                {
                    hashCode = (hashCode * 59) + this.Skip.GetHashCode();
                }
                if (this.BiasingProfile != null)
                {
                    hashCode = (hashCode * 59) + this.BiasingProfile.GetHashCode();
                }
                if (this.Biasing != null)
                {
                    hashCode = (hashCode * 59) + this.Biasing.GetHashCode();
                }
                if (this.CustomUrlParams != null)
                {
                    hashCode = (hashCode * 59) + this.CustomUrlParams.GetHashCode();
                }
                if (this.Sorts != null)
                {
                    hashCode = (hashCode * 59) + this.Sorts.GetHashCode();
                }
                if (this.IncludedNavigations != null)
                {
                    hashCode = (hashCode * 59) + this.IncludedNavigations.GetHashCode();
                }
                if (this.ExcludedNavigations != null)
                {
                    hashCode = (hashCode * 59) + this.ExcludedNavigations.GetHashCode();
                }
                if (this.DynamicFacet != null)
                {
                    hashCode = (hashCode * 59) + this.DynamicFacet.GetHashCode();
                }
                if (this.VariantRollupKeys != null)
                {
                    hashCode = (hashCode * 59) + this.VariantRollupKeys.GetHashCode();
                }
                if (this.PreFilter != null)
                {
                    hashCode = (hashCode * 59) + this.PreFilter.GetHashCode();
                }
                if (this.Site != null)
                {
                    hashCode = (hashCode * 59) + this.Site.GetHashCode();
                }
                if (this.ResponseMask != null)
                {
                    hashCode = (hashCode * 59) + this.ResponseMask.GetHashCode();
                }
                if (this.PageCategories != null)
                {
                    hashCode = (hashCode * 59) + this.PageCategories.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SpellCorrectionMode.GetHashCode();
                if (this.IncludeExpandedResults != null)
                {
                    hashCode = (hashCode * 59) + this.IncludeExpandedResults.GetHashCode();
                }
                if (this.PinUnexpandedResults != null)
                {
                    hashCode = (hashCode * 59) + this.PinUnexpandedResults.GetHashCode();
                }
                if (this.Debug != null)
                {
                    hashCode = (hashCode * 59) + this.Debug.GetHashCode();
                }
                if (this.FacetLimit != null)
                {
                    hashCode = (hashCode * 59) + this.FacetLimit.GetHashCode();
                }
                if (this.LoginId != null)
                {
                    hashCode = (hashCode * 59) + this.LoginId.GetHashCode();
                }
                if (this.Overwrites != null)
                {
                    hashCode = (hashCode * 59) + this.Overwrites.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PageSize (int?) minimum
            if (this.PageSize < (int?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PageSize, must be a value greater than or equal to 0.", new [] { "PageSize" });
            }

            // Skip (long?) minimum
            if (this.Skip < (long?)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Skip, must be a value greater than or equal to 0.", new [] { "Skip" });
            }

            yield break;
        }
    }

}
