/*
 * GroupBy Retail
 *
 * GroupBy Retail API
 *
 * The version of the OpenAPI document: 0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = GroupByInc.RetailApi.Client.Client.OpenAPIDateConverter;

namespace GroupByInc.RetailApi.Client.Model
{
    /// <summary>
    /// Request that should be populated to configure a search API call, made by the client on behalf of a shopper. Contains original request and information about facet for which extra keys requested.
    /// </summary>
    [DataContract(Name = "FacetSearchRequestDto")]
    public partial class FacetSearchRequestDto : IEquatable<FacetSearchRequestDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FacetSearchRequestDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FacetSearchRequestDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FacetSearchRequestDto" /> class.
        /// </summary>
        /// <param name="facet">facet (required).</param>
        /// <param name="originalRequest">originalRequest (required).</param>
        public FacetSearchRequestDto(Facet facet = default(Facet), SearchRequestDto originalRequest = default(SearchRequestDto))
        {
            // to ensure "facet" is required (not null)
            if (facet == null)
            {
                throw new ArgumentNullException("facet is a required property for FacetSearchRequestDto and cannot be null");
            }
            this.Facet = facet;
            // to ensure "originalRequest" is required (not null)
            if (originalRequest == null)
            {
                throw new ArgumentNullException("originalRequest is a required property for FacetSearchRequestDto and cannot be null");
            }
            this.OriginalRequest = originalRequest;
        }

        /// <summary>
        /// Gets or Sets Facet
        /// </summary>
        [DataMember(Name = "facet", IsRequired = true, EmitDefaultValue = true)]
        public Facet Facet { get; set; }

        /// <summary>
        /// Gets or Sets OriginalRequest
        /// </summary>
        [DataMember(Name = "originalRequest", IsRequired = true, EmitDefaultValue = true)]
        public SearchRequestDto OriginalRequest { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FacetSearchRequestDto {\n");
            sb.Append("  Facet: ").Append(Facet).Append("\n");
            sb.Append("  OriginalRequest: ").Append(OriginalRequest).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FacetSearchRequestDto);
        }

        /// <summary>
        /// Returns true if FacetSearchRequestDto instances are equal
        /// </summary>
        /// <param name="input">Instance of FacetSearchRequestDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FacetSearchRequestDto input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Facet == input.Facet ||
                    (this.Facet != null &&
                    this.Facet.Equals(input.Facet))
                ) && 
                (
                    this.OriginalRequest == input.OriginalRequest ||
                    (this.OriginalRequest != null &&
                    this.OriginalRequest.Equals(input.OriginalRequest))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Facet != null)
                {
                    hashCode = (hashCode * 59) + this.Facet.GetHashCode();
                }
                if (this.OriginalRequest != null)
                {
                    hashCode = (hashCode * 59) + this.OriginalRequest.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
