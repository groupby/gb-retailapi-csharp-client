/*
 * GroupBy Retail
 *
 * GroupBy Retail API
 *
 * The version of the OpenAPI document: 0.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = GroupByInc.RetailApi.Client.Client.OpenAPIDateConverter;

namespace GroupByInc.RetailApi.Client.Model
{
    /// <summary>
    /// RuleTemplateSection
    /// </summary>
    [DataContract(Name = "RuleTemplateSection")]
    public partial class RuleTemplateSection : IEquatable<RuleTemplateSection>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ZoneType
        /// </summary>
        [DataMember(Name = "zoneType", IsRequired = true, EmitDefaultValue = true)]
        public ZoneType ZoneType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RuleTemplateSection" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RuleTemplateSection() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RuleTemplateSection" /> class.
        /// </summary>
        /// <param name="zoneId">zoneId (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="zoneContent">zoneContent (required).</param>
        /// <param name="zoneType">zoneType (required).</param>
        public RuleTemplateSection(int zoneId = default(int), string name = default(string), string zoneContent = default(string), ZoneType zoneType = default(ZoneType))
        {
            this.ZoneId = zoneId;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for RuleTemplateSection and cannot be null");
            }
            this.Name = name;
            // to ensure "zoneContent" is required (not null)
            if (zoneContent == null)
            {
                throw new ArgumentNullException("zoneContent is a required property for RuleTemplateSection and cannot be null");
            }
            this.ZoneContent = zoneContent;
            this.ZoneType = zoneType;
        }

        /// <summary>
        /// Gets or Sets ZoneId
        /// </summary>
        [DataMember(Name = "zoneId", IsRequired = true, EmitDefaultValue = true)]
        public int ZoneId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ZoneContent
        /// </summary>
        [DataMember(Name = "zoneContent", IsRequired = true, EmitDefaultValue = true)]
        public string ZoneContent { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RuleTemplateSection {\n");
            sb.Append("  ZoneId: ").Append(ZoneId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ZoneContent: ").Append(ZoneContent).Append("\n");
            sb.Append("  ZoneType: ").Append(ZoneType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RuleTemplateSection);
        }

        /// <summary>
        /// Returns true if RuleTemplateSection instances are equal
        /// </summary>
        /// <param name="input">Instance of RuleTemplateSection to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RuleTemplateSection input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ZoneId == input.ZoneId ||
                    this.ZoneId.Equals(input.ZoneId)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ZoneContent == input.ZoneContent ||
                    (this.ZoneContent != null &&
                    this.ZoneContent.Equals(input.ZoneContent))
                ) && 
                (
                    this.ZoneType == input.ZoneType ||
                    this.ZoneType.Equals(input.ZoneType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.ZoneId.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.ZoneContent != null)
                {
                    hashCode = (hashCode * 59) + this.ZoneContent.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ZoneType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
