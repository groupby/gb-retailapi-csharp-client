/*
 * GroupBy Retail
 *
 * GroupBy Retail API
 *
 * The version of the OpenAPI document: 0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = GroupByInc.RetailApi.Client.Client.OpenAPIDateConverter;

namespace GroupByInc.RetailApi.Client.Model
{
    /// <summary>
    /// Object to wrap all recommendation request configs.
    /// </summary>
    [DataContract(Name = "RecommendationsRequest")]
    public partial class RecommendationsRequest : IEquatable<RecommendationsRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RecommendationsRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RecommendationsRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RecommendationsRequest" /> class.
        /// </summary>
        /// <param name="collection">collection (required).</param>
        /// <param name="visitorId">visitorId.</param>
        /// <param name="limit">limit.</param>
        /// <param name="pageSize">pageSize.</param>
        /// <param name="eventType">eventType.</param>
        /// <param name="loginId">loginId.</param>
        /// <param name="productID">productID.</param>
        /// <param name="fields">fields.</param>
        /// <param name="filters">filters.</param>
        /// <param name="rawFilter">rawFilter.</param>
        /// <param name="placement">placement.</param>
        /// <param name="name">name.</param>
        /// <param name="strictFiltering">The default is true. If strictFiltering true only products that are within the scope of the filter specified. If false, relax the filtering so that the response may contain other products that are outside the scope of the filtering..</param>
        public RecommendationsRequest(string collection = default(string), string visitorId = default(string), string limit = default(string), string pageSize = default(string), string eventType = default(string), string loginId = default(string), List<string> productID = default(List<string>), List<string> fields = default(List<string>), List<Filter> filters = default(List<Filter>), string rawFilter = default(string), string placement = default(string), string name = default(string), bool? strictFiltering = default(bool?))
        {
            // to ensure "collection" is required (not null)
            if (collection == null)
            {
                throw new ArgumentNullException("collection is a required property for RecommendationsRequest and cannot be null");
            }
            this.Collection = collection;
            this.VisitorId = visitorId;
            this.Limit = limit;
            this.PageSize = pageSize;
            this.EventType = eventType;
            this.LoginId = loginId;
            this.ProductID = productID;
            this.Fields = fields;
            this.Filters = filters;
            this.RawFilter = rawFilter;
            this.Placement = placement;
            this.Name = name;
            this.StrictFiltering = strictFiltering;
        }

        /// <summary>
        /// Gets or Sets Collection
        /// </summary>
        [DataMember(Name = "collection", IsRequired = true, EmitDefaultValue = true)]
        public string Collection { get; set; }

        /// <summary>
        /// Gets or Sets VisitorId
        /// </summary>
        [DataMember(Name = "visitorId", EmitDefaultValue = true)]
        public string VisitorId { get; set; }

        /// <summary>
        /// Gets or Sets Limit
        /// </summary>
        [DataMember(Name = "limit", EmitDefaultValue = true)]
        public string Limit { get; set; }

        /// <summary>
        /// Gets or Sets PageSize
        /// </summary>
        [DataMember(Name = "pageSize", EmitDefaultValue = true)]
        public string PageSize { get; set; }

        /// <summary>
        /// Gets or Sets EventType
        /// </summary>
        [DataMember(Name = "eventType", EmitDefaultValue = true)]
        public string EventType { get; set; }

        /// <summary>
        /// Gets or Sets LoginId
        /// </summary>
        [DataMember(Name = "loginId", EmitDefaultValue = true)]
        public string LoginId { get; set; }

        /// <summary>
        /// Gets or Sets ProductID
        /// </summary>
        [DataMember(Name = "productID", EmitDefaultValue = true)]
        public List<string> ProductID { get; set; }

        /// <summary>
        /// Gets or Sets Fields
        /// </summary>
        [DataMember(Name = "fields", EmitDefaultValue = true)]
        public List<string> Fields { get; set; }

        /// <summary>
        /// Gets or Sets Filters
        /// </summary>
        [DataMember(Name = "filters", EmitDefaultValue = true)]
        public List<Filter> Filters { get; set; }

        /// <summary>
        /// Gets or Sets RawFilter
        /// </summary>
        [DataMember(Name = "rawFilter", EmitDefaultValue = true)]
        public string RawFilter { get; set; }

        /// <summary>
        /// Gets or Sets Placement
        /// </summary>
        [DataMember(Name = "placement", EmitDefaultValue = true)]
        public string Placement { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// The default is true. If strictFiltering true only products that are within the scope of the filter specified. If false, relax the filtering so that the response may contain other products that are outside the scope of the filtering.
        /// </summary>
        /// <value>The default is true. If strictFiltering true only products that are within the scope of the filter specified. If false, relax the filtering so that the response may contain other products that are outside the scope of the filtering.</value>
        [DataMember(Name = "strictFiltering", EmitDefaultValue = true)]
        public bool? StrictFiltering { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RecommendationsRequest {\n");
            sb.Append("  Collection: ").Append(Collection).Append("\n");
            sb.Append("  VisitorId: ").Append(VisitorId).Append("\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("  PageSize: ").Append(PageSize).Append("\n");
            sb.Append("  EventType: ").Append(EventType).Append("\n");
            sb.Append("  LoginId: ").Append(LoginId).Append("\n");
            sb.Append("  ProductID: ").Append(ProductID).Append("\n");
            sb.Append("  Fields: ").Append(Fields).Append("\n");
            sb.Append("  Filters: ").Append(Filters).Append("\n");
            sb.Append("  RawFilter: ").Append(RawFilter).Append("\n");
            sb.Append("  Placement: ").Append(Placement).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  StrictFiltering: ").Append(StrictFiltering).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RecommendationsRequest);
        }

        /// <summary>
        /// Returns true if RecommendationsRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of RecommendationsRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RecommendationsRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Collection == input.Collection ||
                    (this.Collection != null &&
                    this.Collection.Equals(input.Collection))
                ) && 
                (
                    this.VisitorId == input.VisitorId ||
                    (this.VisitorId != null &&
                    this.VisitorId.Equals(input.VisitorId))
                ) && 
                (
                    this.Limit == input.Limit ||
                    (this.Limit != null &&
                    this.Limit.Equals(input.Limit))
                ) && 
                (
                    this.PageSize == input.PageSize ||
                    (this.PageSize != null &&
                    this.PageSize.Equals(input.PageSize))
                ) && 
                (
                    this.EventType == input.EventType ||
                    (this.EventType != null &&
                    this.EventType.Equals(input.EventType))
                ) && 
                (
                    this.LoginId == input.LoginId ||
                    (this.LoginId != null &&
                    this.LoginId.Equals(input.LoginId))
                ) && 
                (
                    this.ProductID == input.ProductID ||
                    this.ProductID != null &&
                    input.ProductID != null &&
                    this.ProductID.SequenceEqual(input.ProductID)
                ) && 
                (
                    this.Fields == input.Fields ||
                    this.Fields != null &&
                    input.Fields != null &&
                    this.Fields.SequenceEqual(input.Fields)
                ) && 
                (
                    this.Filters == input.Filters ||
                    this.Filters != null &&
                    input.Filters != null &&
                    this.Filters.SequenceEqual(input.Filters)
                ) && 
                (
                    this.RawFilter == input.RawFilter ||
                    (this.RawFilter != null &&
                    this.RawFilter.Equals(input.RawFilter))
                ) && 
                (
                    this.Placement == input.Placement ||
                    (this.Placement != null &&
                    this.Placement.Equals(input.Placement))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.StrictFiltering == input.StrictFiltering ||
                    (this.StrictFiltering != null &&
                    this.StrictFiltering.Equals(input.StrictFiltering))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Collection != null)
                {
                    hashCode = (hashCode * 59) + this.Collection.GetHashCode();
                }
                if (this.VisitorId != null)
                {
                    hashCode = (hashCode * 59) + this.VisitorId.GetHashCode();
                }
                if (this.Limit != null)
                {
                    hashCode = (hashCode * 59) + this.Limit.GetHashCode();
                }
                if (this.PageSize != null)
                {
                    hashCode = (hashCode * 59) + this.PageSize.GetHashCode();
                }
                if (this.EventType != null)
                {
                    hashCode = (hashCode * 59) + this.EventType.GetHashCode();
                }
                if (this.LoginId != null)
                {
                    hashCode = (hashCode * 59) + this.LoginId.GetHashCode();
                }
                if (this.ProductID != null)
                {
                    hashCode = (hashCode * 59) + this.ProductID.GetHashCode();
                }
                if (this.Fields != null)
                {
                    hashCode = (hashCode * 59) + this.Fields.GetHashCode();
                }
                if (this.Filters != null)
                {
                    hashCode = (hashCode * 59) + this.Filters.GetHashCode();
                }
                if (this.RawFilter != null)
                {
                    hashCode = (hashCode * 59) + this.RawFilter.GetHashCode();
                }
                if (this.Placement != null)
                {
                    hashCode = (hashCode * 59) + this.Placement.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.StrictFiltering != null)
                {
                    hashCode = (hashCode * 59) + this.StrictFiltering.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Collection (string) maxLength
            if (this.Collection != null && this.Collection.Length > 80)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Collection, length must be less than 80.", new [] { "Collection" });
            }

            // Collection (string) minLength
            if (this.Collection != null && this.Collection.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Collection, length must be greater than 1.", new [] { "Collection" });
            }

            // VisitorId (string) maxLength
            if (this.VisitorId != null && this.VisitorId.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for VisitorId, length must be less than 128.", new [] { "VisitorId" });
            }

            yield break;
        }
    }

}
