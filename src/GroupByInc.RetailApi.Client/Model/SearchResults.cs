/*
 * GroupBy Retail
 *
 * GroupBy Retail API
 *
 * The version of the OpenAPI document: 0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = GroupByInc.RetailApi.Client.Client.OpenAPIDateConverter;

namespace GroupByInc.RetailApi.Client.Model
{
    /// <summary>
    /// SAYT response. Contains list of suggestions ad base response information.
    /// </summary>
    [DataContract(Name = "SearchResults")]
    public partial class SearchResults : IEquatable<SearchResults>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchResults" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SearchResults() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchResults" /> class.
        /// </summary>
        /// <param name="stats">stats.</param>
        /// <param name="searchTerms">searchTerms (required).</param>
        /// <param name="extendedAttributes">Map with extended attributes which are returned in autocomplete response. .</param>
        /// <param name="attributeResults">SAYT response attributes. Contains list of direct matching attributes..</param>
        /// <param name="siteFilter">SiteFilter object used with request..</param>
        public SearchResults(SearchResultsStats stats = default(SearchResultsStats), List<SearchTerms> searchTerms = default(List<SearchTerms>), Dictionary<string, List<string>> extendedAttributes = default(Dictionary<string, List<string>>), Dictionary<string, AttributeSuggestion> attributeResults = default(Dictionary<string, AttributeSuggestion>), string siteFilter = default(string))
        {
            // to ensure "searchTerms" is required (not null)
            if (searchTerms == null)
            {
                throw new ArgumentNullException("searchTerms is a required property for SearchResults and cannot be null");
            }
            this.SearchTerms = searchTerms;
            this.Stats = stats;
            this.ExtendedAttributes = extendedAttributes;
            this.AttributeResults = attributeResults;
            this.SiteFilter = siteFilter;
        }

        /// <summary>
        /// Gets or Sets Stats
        /// </summary>
        [DataMember(Name = "stats", EmitDefaultValue = false)]
        public SearchResultsStats Stats { get; set; }

        /// <summary>
        /// Gets or Sets SearchTerms
        /// </summary>
        [DataMember(Name = "searchTerms", IsRequired = true, EmitDefaultValue = true)]
        public List<SearchTerms> SearchTerms { get; set; }

        /// <summary>
        /// Map with extended attributes which are returned in autocomplete response. 
        /// </summary>
        /// <value>Map with extended attributes which are returned in autocomplete response. </value>
        [DataMember(Name = "extendedAttributes", EmitDefaultValue = false)]
        public Dictionary<string, List<string>> ExtendedAttributes { get; set; }

        /// <summary>
        /// SAYT response attributes. Contains list of direct matching attributes.
        /// </summary>
        /// <value>SAYT response attributes. Contains list of direct matching attributes.</value>
        [DataMember(Name = "attributeResults", EmitDefaultValue = false)]
        public Dictionary<string, AttributeSuggestion> AttributeResults { get; set; }

        /// <summary>
        /// SiteFilter object used with request.
        /// </summary>
        /// <value>SiteFilter object used with request.</value>
        [DataMember(Name = "siteFilter", EmitDefaultValue = false)]
        public string SiteFilter { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SearchResults {\n");
            sb.Append("  Stats: ").Append(Stats).Append("\n");
            sb.Append("  SearchTerms: ").Append(SearchTerms).Append("\n");
            sb.Append("  ExtendedAttributes: ").Append(ExtendedAttributes).Append("\n");
            sb.Append("  AttributeResults: ").Append(AttributeResults).Append("\n");
            sb.Append("  SiteFilter: ").Append(SiteFilter).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SearchResults);
        }

        /// <summary>
        /// Returns true if SearchResults instances are equal
        /// </summary>
        /// <param name="input">Instance of SearchResults to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SearchResults input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Stats == input.Stats ||
                    (this.Stats != null &&
                    this.Stats.Equals(input.Stats))
                ) && 
                (
                    this.SearchTerms == input.SearchTerms ||
                    this.SearchTerms != null &&
                    input.SearchTerms != null &&
                    this.SearchTerms.SequenceEqual(input.SearchTerms)
                ) && 
                (
                    this.ExtendedAttributes == input.ExtendedAttributes ||
                    this.ExtendedAttributes != null &&
                    input.ExtendedAttributes != null &&
                    this.ExtendedAttributes.SequenceEqual(input.ExtendedAttributes)
                ) && 
                (
                    this.AttributeResults == input.AttributeResults ||
                    this.AttributeResults != null &&
                    input.AttributeResults != null &&
                    this.AttributeResults.SequenceEqual(input.AttributeResults)
                ) && 
                (
                    this.SiteFilter == input.SiteFilter ||
                    (this.SiteFilter != null &&
                    this.SiteFilter.Equals(input.SiteFilter))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Stats != null)
                {
                    hashCode = (hashCode * 59) + this.Stats.GetHashCode();
                }
                if (this.SearchTerms != null)
                {
                    hashCode = (hashCode * 59) + this.SearchTerms.GetHashCode();
                }
                if (this.ExtendedAttributes != null)
                {
                    hashCode = (hashCode * 59) + this.ExtendedAttributes.GetHashCode();
                }
                if (this.AttributeResults != null)
                {
                    hashCode = (hashCode * 59) + this.AttributeResults.GetHashCode();
                }
                if (this.SiteFilter != null)
                {
                    hashCode = (hashCode * 59) + this.SiteFilter.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
