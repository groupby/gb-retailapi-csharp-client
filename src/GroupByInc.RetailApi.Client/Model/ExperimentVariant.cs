/*
 * GroupBy Retail
 *
 * GroupBy Retail API
 *
 * The version of the OpenAPI document: 0.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = GroupByInc.RetailApi.Client.Client.OpenAPIDateConverter;

namespace GroupByInc.RetailApi.Client.Model
{
    /// <summary>
    /// ExperimentVariant
    /// </summary>
    [DataContract(Name = "ExperimentVariant")]
    public partial class ExperimentVariant : IEquatable<ExperimentVariant>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExperimentVariant" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ExperimentVariant() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ExperimentVariant" /> class.
        /// </summary>
        /// <param name="name">name (required).</param>
        /// <param name="ruleVariant">ruleVariant (required).</param>
        /// <param name="variantTriggerPercentage">variantTriggerPercentage (required).</param>
        public ExperimentVariant(string name = default(string), RuleVariant ruleVariant = default(RuleVariant), int variantTriggerPercentage = default(int))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for ExperimentVariant and cannot be null");
            }
            this.Name = name;
            // to ensure "ruleVariant" is required (not null)
            if (ruleVariant == null)
            {
                throw new ArgumentNullException("ruleVariant is a required property for ExperimentVariant and cannot be null");
            }
            this.RuleVariant = ruleVariant;
            this.VariantTriggerPercentage = variantTriggerPercentage;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets RuleVariant
        /// </summary>
        [DataMember(Name = "ruleVariant", IsRequired = true, EmitDefaultValue = true)]
        public RuleVariant RuleVariant { get; set; }

        /// <summary>
        /// Gets or Sets VariantTriggerPercentage
        /// </summary>
        [DataMember(Name = "variantTriggerPercentage", IsRequired = true, EmitDefaultValue = true)]
        public int VariantTriggerPercentage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ExperimentVariant {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  RuleVariant: ").Append(RuleVariant).Append("\n");
            sb.Append("  VariantTriggerPercentage: ").Append(VariantTriggerPercentage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExperimentVariant);
        }

        /// <summary>
        /// Returns true if ExperimentVariant instances are equal
        /// </summary>
        /// <param name="input">Instance of ExperimentVariant to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExperimentVariant input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.RuleVariant == input.RuleVariant ||
                    (this.RuleVariant != null &&
                    this.RuleVariant.Equals(input.RuleVariant))
                ) && 
                (
                    this.VariantTriggerPercentage == input.VariantTriggerPercentage ||
                    this.VariantTriggerPercentage.Equals(input.VariantTriggerPercentage)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.RuleVariant != null)
                {
                    hashCode = (hashCode * 59) + this.RuleVariant.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.VariantTriggerPercentage.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
