/*
 * GroupBy Retail
 *
 * GroupBy Retail API
 *
 * The version of the OpenAPI document: 0.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = GroupByInc.RetailApi.Client.Client.OpenAPIDateConverter;

namespace GroupByInc.RetailApi.Client.Model
{
    /// <summary>
    /// Information regarding a product in the proprietary Group By API format.
    /// </summary>
    [DataContract(Name = "RecordDto")]
    public partial class RecordDto : IEquatable<RecordDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RecordDto" /> class.
        /// </summary>
        /// <param name="id">Identifier of the record as an MD5 hash..</param>
        /// <param name="u">Logical URL of the record..</param>
        /// <param name="t">Title of the record..</param>
        /// <param name="collection">Collection the record was queried from or resides..</param>
        /// <param name="allMeta">All other metadata, read fields, the record has..</param>
        public RecordDto(string id = default(string), string u = default(string), string t = default(string), string collection = default(string), Dictionary<string, Object> allMeta = default(Dictionary<string, Object>))
        {
            this.Id = id;
            this.U = u;
            this.T = t;
            this.Collection = collection;
            this.AllMeta = allMeta;
        }

        /// <summary>
        /// Identifier of the record as an MD5 hash.
        /// </summary>
        /// <value>Identifier of the record as an MD5 hash.</value>
        /// <example>2cfcf5443046e6733a40608af8a35c95</example>
        [DataMember(Name = "_id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Logical URL of the record.
        /// </summary>
        /// <value>Logical URL of the record.</value>
        /// <example>http://apparel1productsClothing.com/12345</example>
        [DataMember(Name = "_u", EmitDefaultValue = false)]
        public string U { get; set; }

        /// <summary>
        /// Title of the record.
        /// </summary>
        /// <value>Title of the record.</value>
        /// <example>3/4 length shorts</example>
        [DataMember(Name = "_t", EmitDefaultValue = false)]
        public string T { get; set; }

        /// <summary>
        /// Collection the record was queried from or resides.
        /// </summary>
        /// <value>Collection the record was queried from or resides.</value>
        /// <example>productsClothing</example>
        [DataMember(Name = "collection", EmitDefaultValue = false)]
        public string Collection { get; set; }

        /// <summary>
        /// All other metadata, read fields, the record has.
        /// </summary>
        /// <value>All other metadata, read fields, the record has.</value>
        [DataMember(Name = "allMeta", EmitDefaultValue = false)]
        public Dictionary<string, Object> AllMeta { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RecordDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  U: ").Append(U).Append("\n");
            sb.Append("  T: ").Append(T).Append("\n");
            sb.Append("  Collection: ").Append(Collection).Append("\n");
            sb.Append("  AllMeta: ").Append(AllMeta).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RecordDto);
        }

        /// <summary>
        /// Returns true if RecordDto instances are equal
        /// </summary>
        /// <param name="input">Instance of RecordDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RecordDto input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.U == input.U ||
                    (this.U != null &&
                    this.U.Equals(input.U))
                ) && 
                (
                    this.T == input.T ||
                    (this.T != null &&
                    this.T.Equals(input.T))
                ) && 
                (
                    this.Collection == input.Collection ||
                    (this.Collection != null &&
                    this.Collection.Equals(input.Collection))
                ) && 
                (
                    this.AllMeta == input.AllMeta ||
                    this.AllMeta != null &&
                    input.AllMeta != null &&
                    this.AllMeta.SequenceEqual(input.AllMeta)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.U != null)
                {
                    hashCode = (hashCode * 59) + this.U.GetHashCode();
                }
                if (this.T != null)
                {
                    hashCode = (hashCode * 59) + this.T.GetHashCode();
                }
                if (this.Collection != null)
                {
                    hashCode = (hashCode * 59) + this.Collection.GetHashCode();
                }
                if (this.AllMeta != null)
                {
                    hashCode = (hashCode * 59) + this.AllMeta.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
