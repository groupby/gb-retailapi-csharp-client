/*
 * GroupBy Retail
 *
 * GroupBy Retail API
 *
 * The version of the OpenAPI document: 0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = GroupByInc.RetailApi.Client.Client.OpenAPIDateConverter;

namespace GroupByInc.RetailApi.Client.Model
{
    /// <summary>
    /// Fulfillment information, such as the store IDs for in-store pickup or region IDs for different shipping methods.
    /// </summary>
    [DataContract(Name = "FulfillmentInfo")]
    public partial class FulfillmentInfo : IEquatable<FulfillmentInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FulfillmentInfo" /> class.
        /// </summary>
        /// <param name="type">Fulfillment type. Place where product fulfilled..</param>
        /// <param name="placeIds">Place ids where product fulfilled (array)..</param>
        public FulfillmentInfo(string type = default(string), List<string> placeIds = default(List<string>))
        {
            this.Type = type;
            this.PlaceIds = placeIds;
        }

        /// <summary>
        /// Fulfillment type. Place where product fulfilled.
        /// </summary>
        /// <value>Fulfillment type. Place where product fulfilled.</value>
        /// <example>pickup-in-store</example>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Place ids where product fulfilled (array).
        /// </summary>
        /// <value>Place ids where product fulfilled (array).</value>
        /// <example>6, 4, 8</example>
        [DataMember(Name = "placeIds", EmitDefaultValue = false)]
        public List<string> PlaceIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FulfillmentInfo {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  PlaceIds: ").Append(PlaceIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FulfillmentInfo);
        }

        /// <summary>
        /// Returns true if FulfillmentInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of FulfillmentInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FulfillmentInfo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.PlaceIds == input.PlaceIds ||
                    this.PlaceIds != null &&
                    input.PlaceIds != null &&
                    this.PlaceIds.SequenceEqual(input.PlaceIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.PlaceIds != null)
                {
                    hashCode = (hashCode * 59) + this.PlaceIds.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
