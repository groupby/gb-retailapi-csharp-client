/*
 * GroupBy Retail
 *
 * GroupBy Retail API
 *
 * The version of the OpenAPI document: 0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = GroupByInc.RetailApi.Client.Client.OpenAPIDateConverter;

namespace GroupByInc.RetailApi.Client.Model
{
    /// <summary>
    /// Prediction result including list of recommendations based on provided inputs.
    /// </summary>
    [DataContract(Name = "PredictResults")]
    public partial class PredictResults : IEquatable<PredictResults>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PredictResults" /> class.
        /// </summary>
        /// <param name="warnings">Warnings collected with validation and Recommendations AI API issues..</param>
        /// <param name="products">Recommendations built by Recommendations AI model..</param>
        /// <param name="records">Recommendations built by Recommendations AI model..</param>
        /// <param name="modelId">Model Id used for predictions.</param>
        /// <param name="modelName">Model Name used for predictions.</param>
        /// <param name="modelType">  Currently supported values:   &#x60;recommended-for-you&#x60;   &#x60;others-you-may-like&#x60;,   &#x60;frequently-bought-together&#x60;   &#x60;page-optimization&#x60;   &#x60;similar-items&#x60;,   &#x60;buy-it-again&#x60;   &#x60;on-sale-items&#x60;   &#x60;recently-viewed&#x60;    This field together with optimization_objective describe model metadata to use to control model training and   serving. See https://cloud.google.com/retail/docs/models for more details. .</param>
        /// <param name="optimizationObjective">  Currently supported values: &#x60;ctr&#x60;, &#x60;cvr&#x60;, &#x60;revenue-per-order&#x60;.     If not specified, we choose default based on model type. Default depends on type of recommendation:   &#x60;recommended-for-you&#x60; &#x3D;&gt; &#x60;ctr&#x60;   &#x60;others-you-may-like&#x60; &#x3D;&gt; &#x60;ctr&#x60;   &#x60;frequently-bought-together&#x60; &#x3D;&gt; &#x60;revenue_per_order&#x60;    This field together with modelType describe model metadata to use to control model training and serving.   See https://cloud.google.com/retail/docs/models for more details on what the model metadata control and which   combination of parameters are valid. .</param>
        /// <param name="filterSet">Filter set applied to the recommendation.</param>
        /// <param name="rawFilter">RawFilter applied to the recommendation.</param>
        /// <param name="filters">Filters applied to the recommendation.</param>
        /// <param name="metadata">metadata.</param>
        public PredictResults(List<Object> warnings = default(List<Object>), List<Dictionary<string, Object>> products = default(List<Dictionary<string, Object>>), List<Dictionary<string, Object>> records = default(List<Dictionary<string, Object>>), string modelId = default(string), string modelName = default(string), string modelType = default(string), string optimizationObjective = default(string), string filterSet = default(string), string rawFilter = default(string), List<FilterParameter> filters = default(List<FilterParameter>), Object metadata = default(Object))
        {
            this.Warnings = warnings;
            this.Products = products;
            this.Records = records;
            this.ModelId = modelId;
            this.ModelName = modelName;
            this.ModelType = modelType;
            this.OptimizationObjective = optimizationObjective;
            this.FilterSet = filterSet;
            this.RawFilter = rawFilter;
            this.Filters = filters;
            this.Metadata = metadata;
        }

        /// <summary>
        /// Warnings collected with validation and Recommendations AI API issues.
        /// </summary>
        /// <value>Warnings collected with validation and Recommendations AI API issues.</value>
        /// <example>List of Values</example>
        [DataMember(Name = "warnings", EmitDefaultValue = false)]
        public List<Object> Warnings { get; set; }

        /// <summary>
        /// Recommendations built by Recommendations AI model.
        /// </summary>
        /// <value>Recommendations built by Recommendations AI model.</value>
        /// <example>List of Values</example>
        [DataMember(Name = "products", EmitDefaultValue = false)]
        public List<Dictionary<string, Object>> Products { get; set; }

        /// <summary>
        /// Recommendations built by Recommendations AI model.
        /// </summary>
        /// <value>Recommendations built by Recommendations AI model.</value>
        /// <example>List of Values</example>
        [DataMember(Name = "records", EmitDefaultValue = false)]
        public List<Dictionary<string, Object>> Records { get; set; }

        /// <summary>
        /// Model Id used for predictions
        /// </summary>
        /// <value>Model Id used for predictions</value>
        /// <example>SomeString</example>
        [DataMember(Name = "modelId", EmitDefaultValue = false)]
        public string ModelId { get; set; }

        /// <summary>
        /// Model Name used for predictions
        /// </summary>
        /// <value>Model Name used for predictions</value>
        /// <example>SomeString</example>
        [DataMember(Name = "modelName", EmitDefaultValue = false)]
        public string ModelName { get; set; }

        /// <summary>
        ///   Currently supported values:   &#x60;recommended-for-you&#x60;   &#x60;others-you-may-like&#x60;,   &#x60;frequently-bought-together&#x60;   &#x60;page-optimization&#x60;   &#x60;similar-items&#x60;,   &#x60;buy-it-again&#x60;   &#x60;on-sale-items&#x60;   &#x60;recently-viewed&#x60;    This field together with optimization_objective describe model metadata to use to control model training and   serving. See https://cloud.google.com/retail/docs/models for more details. 
        /// </summary>
        /// <value>  Currently supported values:   &#x60;recommended-for-you&#x60;   &#x60;others-you-may-like&#x60;,   &#x60;frequently-bought-together&#x60;   &#x60;page-optimization&#x60;   &#x60;similar-items&#x60;,   &#x60;buy-it-again&#x60;   &#x60;on-sale-items&#x60;   &#x60;recently-viewed&#x60;    This field together with optimization_objective describe model metadata to use to control model training and   serving. See https://cloud.google.com/retail/docs/models for more details. </value>
        /// <example>SomeString</example>
        [DataMember(Name = "modelType", EmitDefaultValue = false)]
        public string ModelType { get; set; }

        /// <summary>
        ///   Currently supported values: &#x60;ctr&#x60;, &#x60;cvr&#x60;, &#x60;revenue-per-order&#x60;.     If not specified, we choose default based on model type. Default depends on type of recommendation:   &#x60;recommended-for-you&#x60; &#x3D;&gt; &#x60;ctr&#x60;   &#x60;others-you-may-like&#x60; &#x3D;&gt; &#x60;ctr&#x60;   &#x60;frequently-bought-together&#x60; &#x3D;&gt; &#x60;revenue_per_order&#x60;    This field together with modelType describe model metadata to use to control model training and serving.   See https://cloud.google.com/retail/docs/models for more details on what the model metadata control and which   combination of parameters are valid. 
        /// </summary>
        /// <value>  Currently supported values: &#x60;ctr&#x60;, &#x60;cvr&#x60;, &#x60;revenue-per-order&#x60;.     If not specified, we choose default based on model type. Default depends on type of recommendation:   &#x60;recommended-for-you&#x60; &#x3D;&gt; &#x60;ctr&#x60;   &#x60;others-you-may-like&#x60; &#x3D;&gt; &#x60;ctr&#x60;   &#x60;frequently-bought-together&#x60; &#x3D;&gt; &#x60;revenue_per_order&#x60;    This field together with modelType describe model metadata to use to control model training and serving.   See https://cloud.google.com/retail/docs/models for more details on what the model metadata control and which   combination of parameters are valid. </value>
        /// <example>SomeString</example>
        [DataMember(Name = "optimizationObjective", EmitDefaultValue = false)]
        public string OptimizationObjective { get; set; }

        /// <summary>
        /// Filter set applied to the recommendation
        /// </summary>
        /// <value>Filter set applied to the recommendation</value>
        /// <example>SomeString</example>
        [DataMember(Name = "filterSet", EmitDefaultValue = false)]
        public string FilterSet { get; set; }

        /// <summary>
        /// RawFilter applied to the recommendation
        /// </summary>
        /// <value>RawFilter applied to the recommendation</value>
        /// <example>SomeString</example>
        [DataMember(Name = "rawFilter", EmitDefaultValue = false)]
        public string RawFilter { get; set; }

        /// <summary>
        /// Filters applied to the recommendation
        /// </summary>
        /// <value>Filters applied to the recommendation</value>
        [DataMember(Name = "filters", EmitDefaultValue = false)]
        public List<FilterParameter> Filters { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name = "metadata", EmitDefaultValue = false)]
        public Object Metadata { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PredictResults {\n");
            sb.Append("  Warnings: ").Append(Warnings).Append("\n");
            sb.Append("  Products: ").Append(Products).Append("\n");
            sb.Append("  Records: ").Append(Records).Append("\n");
            sb.Append("  ModelId: ").Append(ModelId).Append("\n");
            sb.Append("  ModelName: ").Append(ModelName).Append("\n");
            sb.Append("  ModelType: ").Append(ModelType).Append("\n");
            sb.Append("  OptimizationObjective: ").Append(OptimizationObjective).Append("\n");
            sb.Append("  FilterSet: ").Append(FilterSet).Append("\n");
            sb.Append("  RawFilter: ").Append(RawFilter).Append("\n");
            sb.Append("  Filters: ").Append(Filters).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PredictResults);
        }

        /// <summary>
        /// Returns true if PredictResults instances are equal
        /// </summary>
        /// <param name="input">Instance of PredictResults to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PredictResults input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Warnings == input.Warnings ||
                    this.Warnings != null &&
                    input.Warnings != null &&
                    this.Warnings.SequenceEqual(input.Warnings)
                ) && 
                (
                    this.Products == input.Products ||
                    this.Products != null &&
                    input.Products != null &&
                    this.Products.SequenceEqual(input.Products)
                ) && 
                (
                    this.Records == input.Records ||
                    this.Records != null &&
                    input.Records != null &&
                    this.Records.SequenceEqual(input.Records)
                ) && 
                (
                    this.ModelId == input.ModelId ||
                    (this.ModelId != null &&
                    this.ModelId.Equals(input.ModelId))
                ) && 
                (
                    this.ModelName == input.ModelName ||
                    (this.ModelName != null &&
                    this.ModelName.Equals(input.ModelName))
                ) && 
                (
                    this.ModelType == input.ModelType ||
                    (this.ModelType != null &&
                    this.ModelType.Equals(input.ModelType))
                ) && 
                (
                    this.OptimizationObjective == input.OptimizationObjective ||
                    (this.OptimizationObjective != null &&
                    this.OptimizationObjective.Equals(input.OptimizationObjective))
                ) && 
                (
                    this.FilterSet == input.FilterSet ||
                    (this.FilterSet != null &&
                    this.FilterSet.Equals(input.FilterSet))
                ) && 
                (
                    this.RawFilter == input.RawFilter ||
                    (this.RawFilter != null &&
                    this.RawFilter.Equals(input.RawFilter))
                ) && 
                (
                    this.Filters == input.Filters ||
                    this.Filters != null &&
                    input.Filters != null &&
                    this.Filters.SequenceEqual(input.Filters)
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                    this.Metadata.Equals(input.Metadata))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Warnings != null)
                {
                    hashCode = (hashCode * 59) + this.Warnings.GetHashCode();
                }
                if (this.Products != null)
                {
                    hashCode = (hashCode * 59) + this.Products.GetHashCode();
                }
                if (this.Records != null)
                {
                    hashCode = (hashCode * 59) + this.Records.GetHashCode();
                }
                if (this.ModelId != null)
                {
                    hashCode = (hashCode * 59) + this.ModelId.GetHashCode();
                }
                if (this.ModelName != null)
                {
                    hashCode = (hashCode * 59) + this.ModelName.GetHashCode();
                }
                if (this.ModelType != null)
                {
                    hashCode = (hashCode * 59) + this.ModelType.GetHashCode();
                }
                if (this.OptimizationObjective != null)
                {
                    hashCode = (hashCode * 59) + this.OptimizationObjective.GetHashCode();
                }
                if (this.FilterSet != null)
                {
                    hashCode = (hashCode * 59) + this.FilterSet.GetHashCode();
                }
                if (this.RawFilter != null)
                {
                    hashCode = (hashCode * 59) + this.RawFilter.GetHashCode();
                }
                if (this.Filters != null)
                {
                    hashCode = (hashCode * 59) + this.Filters.GetHashCode();
                }
                if (this.Metadata != null)
                {
                    hashCode = (hashCode * 59) + this.Metadata.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
