/*
 * GroupBy Retail
 *
 * GroupBy Retail API
 *
 * The version of the OpenAPI document: 0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = GroupByInc.RetailApi.Client.Client.OpenAPIDateConverter;

namespace GroupByInc.RetailApi.Client.Model
{
    /// <summary>
    /// ProductDtoPriceInfo
    /// </summary>
    [DataContract(Name = "ProductDto_priceInfo")]
    public partial class ProductDtoPriceInfo : IEquatable<ProductDtoPriceInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductDtoPriceInfo" /> class.
        /// </summary>
        /// <param name="currencyCode">Currency code..</param>
        /// <param name="price">Price value..</param>
        /// <param name="originalPrice">Original price value..</param>
        /// <param name="cost">Cost.</param>
        /// <param name="priceEffectiveTime">priceEffectiveTime.</param>
        /// <param name="priceExpireTime">priceExpireTime.</param>
        /// <param name="priceRange">priceRange.</param>
        public ProductDtoPriceInfo(string currencyCode = default(string), float price = default(float), float originalPrice = default(float), float cost = default(float), PriceInfoPriceEffectiveTime priceEffectiveTime = default(PriceInfoPriceEffectiveTime), PriceInfoPriceExpireTime priceExpireTime = default(PriceInfoPriceExpireTime), PriceInfoPriceRange priceRange = default(PriceInfoPriceRange))
        {
            this.CurrencyCode = currencyCode;
            this.Price = price;
            this.OriginalPrice = originalPrice;
            this.Cost = cost;
            this.PriceEffectiveTime = priceEffectiveTime;
            this.PriceExpireTime = priceExpireTime;
            this.PriceRange = priceRange;
        }

        /// <summary>
        /// Currency code.
        /// </summary>
        /// <value>Currency code.</value>
        /// <example>CAD</example>
        [DataMember(Name = "currencyCode", EmitDefaultValue = false)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// Price value.
        /// </summary>
        /// <value>Price value.</value>
        /// <example>1</example>
        [DataMember(Name = "price", EmitDefaultValue = false)]
        public float Price { get; set; }

        /// <summary>
        /// Original price value.
        /// </summary>
        /// <value>Original price value.</value>
        /// <example>1</example>
        [DataMember(Name = "originalPrice", EmitDefaultValue = false)]
        public float OriginalPrice { get; set; }

        /// <summary>
        /// Cost
        /// </summary>
        /// <value>Cost</value>
        /// <example>1</example>
        [DataMember(Name = "cost", EmitDefaultValue = false)]
        public float Cost { get; set; }

        /// <summary>
        /// Gets or Sets PriceEffectiveTime
        /// </summary>
        [DataMember(Name = "priceEffectiveTime", EmitDefaultValue = false)]
        public PriceInfoPriceEffectiveTime PriceEffectiveTime { get; set; }

        /// <summary>
        /// Gets or Sets PriceExpireTime
        /// </summary>
        [DataMember(Name = "priceExpireTime", EmitDefaultValue = false)]
        public PriceInfoPriceExpireTime PriceExpireTime { get; set; }

        /// <summary>
        /// Gets or Sets PriceRange
        /// </summary>
        [DataMember(Name = "priceRange", EmitDefaultValue = false)]
        public PriceInfoPriceRange PriceRange { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProductDtoPriceInfo {\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  OriginalPrice: ").Append(OriginalPrice).Append("\n");
            sb.Append("  Cost: ").Append(Cost).Append("\n");
            sb.Append("  PriceEffectiveTime: ").Append(PriceEffectiveTime).Append("\n");
            sb.Append("  PriceExpireTime: ").Append(PriceExpireTime).Append("\n");
            sb.Append("  PriceRange: ").Append(PriceRange).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProductDtoPriceInfo);
        }

        /// <summary>
        /// Returns true if ProductDtoPriceInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of ProductDtoPriceInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProductDtoPriceInfo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CurrencyCode == input.CurrencyCode ||
                    (this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(input.CurrencyCode))
                ) && 
                (
                    this.Price == input.Price ||
                    this.Price.Equals(input.Price)
                ) && 
                (
                    this.OriginalPrice == input.OriginalPrice ||
                    this.OriginalPrice.Equals(input.OriginalPrice)
                ) && 
                (
                    this.Cost == input.Cost ||
                    this.Cost.Equals(input.Cost)
                ) && 
                (
                    this.PriceEffectiveTime == input.PriceEffectiveTime ||
                    (this.PriceEffectiveTime != null &&
                    this.PriceEffectiveTime.Equals(input.PriceEffectiveTime))
                ) && 
                (
                    this.PriceExpireTime == input.PriceExpireTime ||
                    (this.PriceExpireTime != null &&
                    this.PriceExpireTime.Equals(input.PriceExpireTime))
                ) && 
                (
                    this.PriceRange == input.PriceRange ||
                    (this.PriceRange != null &&
                    this.PriceRange.Equals(input.PriceRange))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CurrencyCode != null)
                {
                    hashCode = (hashCode * 59) + this.CurrencyCode.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Price.GetHashCode();
                hashCode = (hashCode * 59) + this.OriginalPrice.GetHashCode();
                hashCode = (hashCode * 59) + this.Cost.GetHashCode();
                if (this.PriceEffectiveTime != null)
                {
                    hashCode = (hashCode * 59) + this.PriceEffectiveTime.GetHashCode();
                }
                if (this.PriceExpireTime != null)
                {
                    hashCode = (hashCode * 59) + this.PriceExpireTime.GetHashCode();
                }
                if (this.PriceRange != null)
                {
                    hashCode = (hashCode * 59) + this.PriceRange.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
