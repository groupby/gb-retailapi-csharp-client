/*
 * GroupBy Retail
 *
 * GroupBy Retail API
 *
 * The version of the OpenAPI document: 0.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = GroupByInc.RetailApi.Client.Client.OpenAPIDateConverter;

namespace GroupByInc.RetailApi.Client.Model
{
    /// <summary>
    /// UI zones, that may contain code snippets, sub-searches and etc.
    /// </summary>
    [DataContract(Name = "ZoneDto")]
    public partial class ZoneDto : IEquatable<ZoneDto>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public ZoneDtoType? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ZoneDto" /> class.
        /// </summary>
        /// <param name="name">A name for the zone, ideally human-readable..</param>
        /// <param name="type">type.</param>
        /// <param name="content">Zone content - it is can be any data, HTML - code, usual text or etc.</param>
        /// <param name="richContent">Zone content - it is can be any data, HTML - code, usual text or etc.</param>
        public ZoneDto(string name = default(string), ZoneDtoType? type = default(ZoneDtoType?), string content = default(string), string richContent = default(string))
        {
            this.Name = name;
            this.Type = type;
            this.Content = content;
            this.RichContent = richContent;
        }

        /// <summary>
        /// A name for the zone, ideally human-readable.
        /// </summary>
        /// <value>A name for the zone, ideally human-readable.</value>
        /// <example>any string</example>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Zone content - it is can be any data, HTML - code, usual text or etc
        /// </summary>
        /// <value>Zone content - it is can be any data, HTML - code, usual text or etc</value>
        /// <example>any string</example>
        [DataMember(Name = "content", EmitDefaultValue = false)]
        public string Content { get; set; }

        /// <summary>
        /// Zone content - it is can be any data, HTML - code, usual text or etc
        /// </summary>
        /// <value>Zone content - it is can be any data, HTML - code, usual text or etc</value>
        /// <example>any string</example>
        [DataMember(Name = "richContent", EmitDefaultValue = false)]
        public string RichContent { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ZoneDto {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  RichContent: ").Append(RichContent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ZoneDto);
        }

        /// <summary>
        /// Returns true if ZoneDto instances are equal
        /// </summary>
        /// <param name="input">Instance of ZoneDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ZoneDto input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.Content == input.Content ||
                    (this.Content != null &&
                    this.Content.Equals(input.Content))
                ) && 
                (
                    this.RichContent == input.RichContent ||
                    (this.RichContent != null &&
                    this.RichContent.Equals(input.RichContent))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                if (this.Content != null)
                {
                    hashCode = (hashCode * 59) + this.Content.GetHashCode();
                }
                if (this.RichContent != null)
                {
                    hashCode = (hashCode * 59) + this.RichContent.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
