/*
 * GroupBy Retail
 *
 * GroupBy Retail API
 *
 * The version of the OpenAPI document: 0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = GroupByInc.RetailApi.Client.Client.OpenAPIDateConverter;

namespace GroupByInc.RetailApi.Client.Model
{
    /// <summary>
    /// QueryPatternTrigger
    /// </summary>
    [DataContract(Name = "QueryPatternTrigger")]
    public partial class QueryPatternTrigger : IEquatable<QueryPatternTrigger>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public QueryPatternTriggerType Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="QueryPatternTrigger" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected QueryPatternTrigger() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="QueryPatternTrigger" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="values">values.</param>
        /// <param name="patterns">patterns.</param>
        public QueryPatternTrigger(QueryPatternTriggerType type = default(QueryPatternTriggerType), List<string> values = default(List<string>), List<Object> patterns = default(List<Object>))
        {
            this.Type = type;
            this.Values = values;
            this.Patterns = patterns;
        }

        /// <summary>
        /// Gets or Sets Values
        /// </summary>
        [DataMember(Name = "values", EmitDefaultValue = false)]
        public List<string> Values { get; set; }

        /// <summary>
        /// Gets or Sets Patterns
        /// </summary>
        [DataMember(Name = "patterns", EmitDefaultValue = false)]
        public List<Object> Patterns { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class QueryPatternTrigger {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Values: ").Append(Values).Append("\n");
            sb.Append("  Patterns: ").Append(Patterns).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as QueryPatternTrigger);
        }

        /// <summary>
        /// Returns true if QueryPatternTrigger instances are equal
        /// </summary>
        /// <param name="input">Instance of QueryPatternTrigger to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QueryPatternTrigger input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.Values == input.Values ||
                    this.Values != null &&
                    input.Values != null &&
                    this.Values.SequenceEqual(input.Values)
                ) && 
                (
                    this.Patterns == input.Patterns ||
                    this.Patterns != null &&
                    input.Patterns != null &&
                    this.Patterns.SequenceEqual(input.Patterns)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                if (this.Values != null)
                {
                    hashCode = (hashCode * 59) + this.Values.GetHashCode();
                }
                if (this.Patterns != null)
                {
                    hashCode = (hashCode * 59) + this.Patterns.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
