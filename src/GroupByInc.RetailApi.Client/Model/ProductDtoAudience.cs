/*
 * GroupBy Retail
 *
 * GroupBy Retail API
 *
 * The version of the OpenAPI document: 0.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = GroupByInc.RetailApi.Client.Client.OpenAPIDateConverter;

namespace GroupByInc.RetailApi.Client.Model
{
    /// <summary>
    /// ProductDtoAudience
    /// </summary>
    [DataContract(Name = "ProductDto_audience")]
    public partial class ProductDtoAudience : IEquatable<ProductDtoAudience>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductDtoAudience" /> class.
        /// </summary>
        /// <param name="genders">The genders of the audience. Strongly encouraged to use the standard values: &#39;male&#39;, &#39;female&#39;, &#39;unisex&#39;. At most 5 values are allowed. Length limit of 128 characters..</param>
        /// <param name="ageGroups">The age groups of the audience. Strongly encouraged to use the standard values: &#39;newborn&#39; (up to 3 months old), &#39;infant&#39; (3-12 months old), &#39;toddler&#39; (1-5 years old), &#39;kids&#39; (5-13 years old), &#39;adult&#39; (typically teens or older). At most 5 values are allowed. Length limit of 128 characters..</param>
        public ProductDtoAudience(List<string> genders = default(List<string>), List<string> ageGroups = default(List<string>))
        {
            this.Genders = genders;
            this.AgeGroups = ageGroups;
        }

        /// <summary>
        /// The genders of the audience. Strongly encouraged to use the standard values: &#39;male&#39;, &#39;female&#39;, &#39;unisex&#39;. At most 5 values are allowed. Length limit of 128 characters.
        /// </summary>
        /// <value>The genders of the audience. Strongly encouraged to use the standard values: &#39;male&#39;, &#39;female&#39;, &#39;unisex&#39;. At most 5 values are allowed. Length limit of 128 characters.</value>
        /// <example>unisex</example>
        [DataMember(Name = "genders", EmitDefaultValue = false)]
        public List<string> Genders { get; set; }

        /// <summary>
        /// The age groups of the audience. Strongly encouraged to use the standard values: &#39;newborn&#39; (up to 3 months old), &#39;infant&#39; (3-12 months old), &#39;toddler&#39; (1-5 years old), &#39;kids&#39; (5-13 years old), &#39;adult&#39; (typically teens or older). At most 5 values are allowed. Length limit of 128 characters.
        /// </summary>
        /// <value>The age groups of the audience. Strongly encouraged to use the standard values: &#39;newborn&#39; (up to 3 months old), &#39;infant&#39; (3-12 months old), &#39;toddler&#39; (1-5 years old), &#39;kids&#39; (5-13 years old), &#39;adult&#39; (typically teens or older). At most 5 values are allowed. Length limit of 128 characters.</value>
        /// <example>newborn</example>
        [DataMember(Name = "ageGroups", EmitDefaultValue = false)]
        public List<string> AgeGroups { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProductDtoAudience {\n");
            sb.Append("  Genders: ").Append(Genders).Append("\n");
            sb.Append("  AgeGroups: ").Append(AgeGroups).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProductDtoAudience);
        }

        /// <summary>
        /// Returns true if ProductDtoAudience instances are equal
        /// </summary>
        /// <param name="input">Instance of ProductDtoAudience to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProductDtoAudience input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Genders == input.Genders ||
                    this.Genders != null &&
                    input.Genders != null &&
                    this.Genders.SequenceEqual(input.Genders)
                ) && 
                (
                    this.AgeGroups == input.AgeGroups ||
                    this.AgeGroups != null &&
                    input.AgeGroups != null &&
                    this.AgeGroups.SequenceEqual(input.AgeGroups)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Genders != null)
                {
                    hashCode = (hashCode * 59) + this.Genders.GetHashCode();
                }
                if (this.AgeGroups != null)
                {
                    hashCode = (hashCode * 59) + this.AgeGroups.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
