/*
 * GroupBy Retail
 *
 * GroupBy Retail API
 *
 * The version of the OpenAPI document: 0.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = GroupByInc.RetailApi.Client.Client.OpenAPIDateConverter;

namespace GroupByInc.RetailApi.Client.Model
{
    /// <summary>
    /// Response of calling the search API, including various elements of the original request context, matching records and general metadata relating to the results.
    /// </summary>
    [DataContract(Name = "SearchResponseDto")]
    public partial class SearchResponseDto : IEquatable<SearchResponseDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchResponseDto" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SearchResponseDto() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchResponseDto" /> class.
        /// </summary>
        /// <param name="id">Unique identifier for the search..</param>
        /// <param name="area">Area Id the search was performed in..</param>
        /// <param name="query">Original search query..</param>
        /// <param name="correctedQuery">Search query after any changes/corrections are done by the engine..</param>
        /// <param name="biasingProfile">Name of the biasing profile which was used to bias products in the search results..</param>
        /// <param name="biasingProfileAppliedId">Id of the biasing profile which was used to bias products in the search results..</param>
        /// <param name="filter">filter (required).</param>
        /// <param name="originalRequest">originalRequest (required).</param>
        /// <param name="records">The list of records that match the search..</param>
        /// <param name="totalRecordCount">The total number of products that match the search. If all products were filtered out on S4R site equals to 0..</param>
        /// <param name="metadata">metadata (required).</param>
        /// <param name="pageInfo">pageInfo (required).</param>
        /// <param name="availableNavigation">availableNavigation (required).</param>
        /// <param name="selectedNavigation">selectedNavigation (required).</param>
        /// <param name="redirect">URL to which the merchandiser should redirect the shopper to..</param>
        /// <param name="experiments">experiments (required).</param>
        /// <param name="template">template (required).</param>
        /// <param name="empty">True if the search yielded no results, otherwise false..</param>
        /// <param name="siteParams">siteParams (required).</param>
        /// <param name="debug">debug (required).</param>
        /// <param name="warnings">Warning messages containing information about invalid products, etc..</param>
        /// <param name="includeExpandedResults">When a shopper uses an ambiguous or a multi-word search phrase, they can get an empty response. After turning on include expanded results, Retail Search analyzes the request and returns the expanded list of products based on the parsed search query. For example, if you search \&quot;Google Pixel 5\&quot; without query expansion, you might only get \&quot;google_pixel_5\&quot; in the result. With query expansion, you might get \&quot;google_pixel_4a_with_5g\&quot;, \&quot;google_pixel_4a\&quot; and \&quot;google_pixel_5_case\&quot; as well.The default value is configured in the tenant settings or true if there is no such setting.</param>
        /// <param name="facetLimit">Maximum of facet values that should be returned for this facet. If not specified, defaults to 20. The maximum allowed value is 300. Values above 300 will be coerced to 300.  If this field is negative, an INVALID_ARGUMENT is returned.  This limit (300) is configured on Google side, but Google have an ability to change it for specific project. .</param>
        /// <param name="redirectMetadata">redirectMetadata (required).</param>
        public SearchResponseDto(string id = default(string), string area = default(string), string query = default(string), string correctedQuery = default(string), string biasingProfile = default(string), int biasingProfileAppliedId = default(int), string filter = default(string), SearchRequestDto originalRequest = default(SearchRequestDto), List<RecordDto> records = default(List<RecordDto>), long totalRecordCount = default(long), SearchMetadataDto metadata = default(SearchMetadataDto), PageInfoDto pageInfo = default(PageInfoDto), List<NavigationDto> availableNavigation = default(List<NavigationDto>), List<NavigationDto> selectedNavigation = default(List<NavigationDto>), string redirect = default(string), List<Experiment> experiments = default(List<Experiment>), TemplateDto template = default(TemplateDto), bool empty = default(bool), List<Metadata> siteParams = default(List<Metadata>), DebugDto debug = default(DebugDto), List<string> warnings = default(List<string>), bool includeExpandedResults = default(bool), int facetLimit = default(int), List<Metadata> redirectMetadata = default(List<Metadata>))
        {
            // to ensure "filter" is required (not null)
            if (filter == null)
            {
                throw new ArgumentNullException("filter is a required property for SearchResponseDto and cannot be null");
            }
            this.Filter = filter;
            // to ensure "originalRequest" is required (not null)
            if (originalRequest == null)
            {
                throw new ArgumentNullException("originalRequest is a required property for SearchResponseDto and cannot be null");
            }
            this.OriginalRequest = originalRequest;
            // to ensure "metadata" is required (not null)
            if (metadata == null)
            {
                throw new ArgumentNullException("metadata is a required property for SearchResponseDto and cannot be null");
            }
            this.Metadata = metadata;
            // to ensure "pageInfo" is required (not null)
            if (pageInfo == null)
            {
                throw new ArgumentNullException("pageInfo is a required property for SearchResponseDto and cannot be null");
            }
            this.PageInfo = pageInfo;
            // to ensure "availableNavigation" is required (not null)
            if (availableNavigation == null)
            {
                throw new ArgumentNullException("availableNavigation is a required property for SearchResponseDto and cannot be null");
            }
            this.AvailableNavigation = availableNavigation;
            // to ensure "selectedNavigation" is required (not null)
            if (selectedNavigation == null)
            {
                throw new ArgumentNullException("selectedNavigation is a required property for SearchResponseDto and cannot be null");
            }
            this.SelectedNavigation = selectedNavigation;
            // to ensure "experiments" is required (not null)
            if (experiments == null)
            {
                throw new ArgumentNullException("experiments is a required property for SearchResponseDto and cannot be null");
            }
            this.Experiments = experiments;
            // to ensure "template" is required (not null)
            if (template == null)
            {
                throw new ArgumentNullException("template is a required property for SearchResponseDto and cannot be null");
            }
            this.Template = template;
            // to ensure "siteParams" is required (not null)
            if (siteParams == null)
            {
                throw new ArgumentNullException("siteParams is a required property for SearchResponseDto and cannot be null");
            }
            this.SiteParams = siteParams;
            // to ensure "debug" is required (not null)
            if (debug == null)
            {
                throw new ArgumentNullException("debug is a required property for SearchResponseDto and cannot be null");
            }
            this.Debug = debug;
            // to ensure "redirectMetadata" is required (not null)
            if (redirectMetadata == null)
            {
                throw new ArgumentNullException("redirectMetadata is a required property for SearchResponseDto and cannot be null");
            }
            this.RedirectMetadata = redirectMetadata;
            this.Id = id;
            this.Area = area;
            this.Query = query;
            this.CorrectedQuery = correctedQuery;
            this.BiasingProfile = biasingProfile;
            this.BiasingProfileAppliedId = biasingProfileAppliedId;
            this.Records = records;
            this.TotalRecordCount = totalRecordCount;
            this.Redirect = redirect;
            this.Empty = empty;
            this.Warnings = warnings;
            this.IncludeExpandedResults = includeExpandedResults;
            this.FacetLimit = facetLimit;
        }

        /// <summary>
        /// Unique identifier for the search.
        /// </summary>
        /// <value>Unique identifier for the search.</value>
        /// <example>1d7dc797-e1cb-49dc-8791-f2317a218f13</example>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Area Id the search was performed in.
        /// </summary>
        /// <value>Area Id the search was performed in.</value>
        /// <example>Production</example>
        [DataMember(Name = "area", EmitDefaultValue = false)]
        public string Area { get; set; }

        /// <summary>
        /// Original search query.
        /// </summary>
        /// <value>Original search query.</value>
        /// <example>blue swetter</example>
        [DataMember(Name = "query", EmitDefaultValue = false)]
        public string Query { get; set; }

        /// <summary>
        /// Search query after any changes/corrections are done by the engine.
        /// </summary>
        /// <value>Search query after any changes/corrections are done by the engine.</value>
        /// <example>blue sweater</example>
        [DataMember(Name = "correctedQuery", EmitDefaultValue = false)]
        public string CorrectedQuery { get; set; }

        /// <summary>
        /// Name of the biasing profile which was used to bias products in the search results.
        /// </summary>
        /// <value>Name of the biasing profile which was used to bias products in the search results.</value>
        /// <example>Query</example>
        [DataMember(Name = "biasingProfile", EmitDefaultValue = false)]
        public string BiasingProfile { get; set; }

        /// <summary>
        /// Id of the biasing profile which was used to bias products in the search results.
        /// </summary>
        /// <value>Id of the biasing profile which was used to bias products in the search results.</value>
        /// <example>1</example>
        [DataMember(Name = "biasingProfileAppliedId", EmitDefaultValue = false)]
        public int BiasingProfileAppliedId { get; set; }

        /// <summary>
        /// Gets or Sets Filter
        /// </summary>
        [DataMember(Name = "filter", IsRequired = true, EmitDefaultValue = true)]
        public string Filter { get; set; }

        /// <summary>
        /// Gets or Sets OriginalRequest
        /// </summary>
        [DataMember(Name = "originalRequest", IsRequired = true, EmitDefaultValue = true)]
        public SearchRequestDto OriginalRequest { get; set; }

        /// <summary>
        /// The list of records that match the search.
        /// </summary>
        /// <value>The list of records that match the search.</value>
        [DataMember(Name = "records", EmitDefaultValue = false)]
        public List<RecordDto> Records { get; set; }

        /// <summary>
        /// The total number of products that match the search. If all products were filtered out on S4R site equals to 0.
        /// </summary>
        /// <value>The total number of products that match the search. If all products were filtered out on S4R site equals to 0.</value>
        /// <example>273</example>
        [DataMember(Name = "totalRecordCount", EmitDefaultValue = false)]
        public long TotalRecordCount { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name = "metadata", IsRequired = true, EmitDefaultValue = true)]
        public SearchMetadataDto Metadata { get; set; }

        /// <summary>
        /// Gets or Sets PageInfo
        /// </summary>
        [DataMember(Name = "pageInfo", IsRequired = true, EmitDefaultValue = true)]
        public PageInfoDto PageInfo { get; set; }

        /// <summary>
        /// Gets or Sets AvailableNavigation
        /// </summary>
        [DataMember(Name = "availableNavigation", IsRequired = true, EmitDefaultValue = true)]
        public List<NavigationDto> AvailableNavigation { get; set; }

        /// <summary>
        /// Gets or Sets SelectedNavigation
        /// </summary>
        [DataMember(Name = "selectedNavigation", IsRequired = true, EmitDefaultValue = true)]
        public List<NavigationDto> SelectedNavigation { get; set; }

        /// <summary>
        /// URL to which the merchandiser should redirect the shopper to.
        /// </summary>
        /// <value>URL to which the merchandiser should redirect the shopper to.</value>
        /// <example>www.example.com/2021-deals</example>
        [DataMember(Name = "redirect", EmitDefaultValue = false)]
        public string Redirect { get; set; }

        /// <summary>
        /// Gets or Sets Experiments
        /// </summary>
        [DataMember(Name = "experiments", IsRequired = true, EmitDefaultValue = true)]
        public List<Experiment> Experiments { get; set; }

        /// <summary>
        /// Gets or Sets Template
        /// </summary>
        [DataMember(Name = "template", IsRequired = true, EmitDefaultValue = true)]
        public TemplateDto Template { get; set; }

        /// <summary>
        /// True if the search yielded no results, otherwise false.
        /// </summary>
        /// <value>True if the search yielded no results, otherwise false.</value>
        [DataMember(Name = "empty", EmitDefaultValue = true)]
        public bool Empty { get; set; }

        /// <summary>
        /// Gets or Sets SiteParams
        /// </summary>
        [DataMember(Name = "siteParams", IsRequired = true, EmitDefaultValue = true)]
        public List<Metadata> SiteParams { get; set; }

        /// <summary>
        /// Gets or Sets Debug
        /// </summary>
        [DataMember(Name = "debug", IsRequired = true, EmitDefaultValue = true)]
        public DebugDto Debug { get; set; }

        /// <summary>
        /// Warning messages containing information about invalid products, etc.
        /// </summary>
        /// <value>Warning messages containing information about invalid products, etc.</value>
        [DataMember(Name = "warnings", EmitDefaultValue = false)]
        public List<string> Warnings { get; set; }

        /// <summary>
        /// When a shopper uses an ambiguous or a multi-word search phrase, they can get an empty response. After turning on include expanded results, Retail Search analyzes the request and returns the expanded list of products based on the parsed search query. For example, if you search \&quot;Google Pixel 5\&quot; without query expansion, you might only get \&quot;google_pixel_5\&quot; in the result. With query expansion, you might get \&quot;google_pixel_4a_with_5g\&quot;, \&quot;google_pixel_4a\&quot; and \&quot;google_pixel_5_case\&quot; as well.The default value is configured in the tenant settings or true if there is no such setting
        /// </summary>
        /// <value>When a shopper uses an ambiguous or a multi-word search phrase, they can get an empty response. After turning on include expanded results, Retail Search analyzes the request and returns the expanded list of products based on the parsed search query. For example, if you search \&quot;Google Pixel 5\&quot; without query expansion, you might only get \&quot;google_pixel_5\&quot; in the result. With query expansion, you might get \&quot;google_pixel_4a_with_5g\&quot;, \&quot;google_pixel_4a\&quot; and \&quot;google_pixel_5_case\&quot; as well.The default value is configured in the tenant settings or true if there is no such setting</value>
        [DataMember(Name = "includeExpandedResults", EmitDefaultValue = true)]
        public bool IncludeExpandedResults { get; set; }

        /// <summary>
        /// Maximum of facet values that should be returned for this facet. If not specified, defaults to 20. The maximum allowed value is 300. Values above 300 will be coerced to 300.  If this field is negative, an INVALID_ARGUMENT is returned.  This limit (300) is configured on Google side, but Google have an ability to change it for specific project. 
        /// </summary>
        /// <value>Maximum of facet values that should be returned for this facet. If not specified, defaults to 20. The maximum allowed value is 300. Values above 300 will be coerced to 300.  If this field is negative, an INVALID_ARGUMENT is returned.  This limit (300) is configured on Google side, but Google have an ability to change it for specific project. </value>
        [DataMember(Name = "facetLimit", EmitDefaultValue = false)]
        public int FacetLimit { get; set; }

        /// <summary>
        /// Gets or Sets RedirectMetadata
        /// </summary>
        [DataMember(Name = "redirectMetadata", IsRequired = true, EmitDefaultValue = true)]
        public List<Metadata> RedirectMetadata { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SearchResponseDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Area: ").Append(Area).Append("\n");
            sb.Append("  Query: ").Append(Query).Append("\n");
            sb.Append("  CorrectedQuery: ").Append(CorrectedQuery).Append("\n");
            sb.Append("  BiasingProfile: ").Append(BiasingProfile).Append("\n");
            sb.Append("  BiasingProfileAppliedId: ").Append(BiasingProfileAppliedId).Append("\n");
            sb.Append("  Filter: ").Append(Filter).Append("\n");
            sb.Append("  OriginalRequest: ").Append(OriginalRequest).Append("\n");
            sb.Append("  Records: ").Append(Records).Append("\n");
            sb.Append("  TotalRecordCount: ").Append(TotalRecordCount).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  PageInfo: ").Append(PageInfo).Append("\n");
            sb.Append("  AvailableNavigation: ").Append(AvailableNavigation).Append("\n");
            sb.Append("  SelectedNavigation: ").Append(SelectedNavigation).Append("\n");
            sb.Append("  Redirect: ").Append(Redirect).Append("\n");
            sb.Append("  Experiments: ").Append(Experiments).Append("\n");
            sb.Append("  Template: ").Append(Template).Append("\n");
            sb.Append("  Empty: ").Append(Empty).Append("\n");
            sb.Append("  SiteParams: ").Append(SiteParams).Append("\n");
            sb.Append("  Debug: ").Append(Debug).Append("\n");
            sb.Append("  Warnings: ").Append(Warnings).Append("\n");
            sb.Append("  IncludeExpandedResults: ").Append(IncludeExpandedResults).Append("\n");
            sb.Append("  FacetLimit: ").Append(FacetLimit).Append("\n");
            sb.Append("  RedirectMetadata: ").Append(RedirectMetadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SearchResponseDto);
        }

        /// <summary>
        /// Returns true if SearchResponseDto instances are equal
        /// </summary>
        /// <param name="input">Instance of SearchResponseDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SearchResponseDto input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Area == input.Area ||
                    (this.Area != null &&
                    this.Area.Equals(input.Area))
                ) && 
                (
                    this.Query == input.Query ||
                    (this.Query != null &&
                    this.Query.Equals(input.Query))
                ) && 
                (
                    this.CorrectedQuery == input.CorrectedQuery ||
                    (this.CorrectedQuery != null &&
                    this.CorrectedQuery.Equals(input.CorrectedQuery))
                ) && 
                (
                    this.BiasingProfile == input.BiasingProfile ||
                    (this.BiasingProfile != null &&
                    this.BiasingProfile.Equals(input.BiasingProfile))
                ) && 
                (
                    this.BiasingProfileAppliedId == input.BiasingProfileAppliedId ||
                    this.BiasingProfileAppliedId.Equals(input.BiasingProfileAppliedId)
                ) && 
                (
                    this.Filter == input.Filter ||
                    (this.Filter != null &&
                    this.Filter.Equals(input.Filter))
                ) && 
                (
                    this.OriginalRequest == input.OriginalRequest ||
                    (this.OriginalRequest != null &&
                    this.OriginalRequest.Equals(input.OriginalRequest))
                ) && 
                (
                    this.Records == input.Records ||
                    this.Records != null &&
                    input.Records != null &&
                    this.Records.SequenceEqual(input.Records)
                ) && 
                (
                    this.TotalRecordCount == input.TotalRecordCount ||
                    this.TotalRecordCount.Equals(input.TotalRecordCount)
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                    this.Metadata.Equals(input.Metadata))
                ) && 
                (
                    this.PageInfo == input.PageInfo ||
                    (this.PageInfo != null &&
                    this.PageInfo.Equals(input.PageInfo))
                ) && 
                (
                    this.AvailableNavigation == input.AvailableNavigation ||
                    this.AvailableNavigation != null &&
                    input.AvailableNavigation != null &&
                    this.AvailableNavigation.SequenceEqual(input.AvailableNavigation)
                ) && 
                (
                    this.SelectedNavigation == input.SelectedNavigation ||
                    this.SelectedNavigation != null &&
                    input.SelectedNavigation != null &&
                    this.SelectedNavigation.SequenceEqual(input.SelectedNavigation)
                ) && 
                (
                    this.Redirect == input.Redirect ||
                    (this.Redirect != null &&
                    this.Redirect.Equals(input.Redirect))
                ) && 
                (
                    this.Experiments == input.Experiments ||
                    this.Experiments != null &&
                    input.Experiments != null &&
                    this.Experiments.SequenceEqual(input.Experiments)
                ) && 
                (
                    this.Template == input.Template ||
                    (this.Template != null &&
                    this.Template.Equals(input.Template))
                ) && 
                (
                    this.Empty == input.Empty ||
                    this.Empty.Equals(input.Empty)
                ) && 
                (
                    this.SiteParams == input.SiteParams ||
                    this.SiteParams != null &&
                    input.SiteParams != null &&
                    this.SiteParams.SequenceEqual(input.SiteParams)
                ) && 
                (
                    this.Debug == input.Debug ||
                    (this.Debug != null &&
                    this.Debug.Equals(input.Debug))
                ) && 
                (
                    this.Warnings == input.Warnings ||
                    this.Warnings != null &&
                    input.Warnings != null &&
                    this.Warnings.SequenceEqual(input.Warnings)
                ) && 
                (
                    this.IncludeExpandedResults == input.IncludeExpandedResults ||
                    this.IncludeExpandedResults.Equals(input.IncludeExpandedResults)
                ) && 
                (
                    this.FacetLimit == input.FacetLimit ||
                    this.FacetLimit.Equals(input.FacetLimit)
                ) && 
                (
                    this.RedirectMetadata == input.RedirectMetadata ||
                    this.RedirectMetadata != null &&
                    input.RedirectMetadata != null &&
                    this.RedirectMetadata.SequenceEqual(input.RedirectMetadata)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Area != null)
                {
                    hashCode = (hashCode * 59) + this.Area.GetHashCode();
                }
                if (this.Query != null)
                {
                    hashCode = (hashCode * 59) + this.Query.GetHashCode();
                }
                if (this.CorrectedQuery != null)
                {
                    hashCode = (hashCode * 59) + this.CorrectedQuery.GetHashCode();
                }
                if (this.BiasingProfile != null)
                {
                    hashCode = (hashCode * 59) + this.BiasingProfile.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.BiasingProfileAppliedId.GetHashCode();
                if (this.Filter != null)
                {
                    hashCode = (hashCode * 59) + this.Filter.GetHashCode();
                }
                if (this.OriginalRequest != null)
                {
                    hashCode = (hashCode * 59) + this.OriginalRequest.GetHashCode();
                }
                if (this.Records != null)
                {
                    hashCode = (hashCode * 59) + this.Records.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TotalRecordCount.GetHashCode();
                if (this.Metadata != null)
                {
                    hashCode = (hashCode * 59) + this.Metadata.GetHashCode();
                }
                if (this.PageInfo != null)
                {
                    hashCode = (hashCode * 59) + this.PageInfo.GetHashCode();
                }
                if (this.AvailableNavigation != null)
                {
                    hashCode = (hashCode * 59) + this.AvailableNavigation.GetHashCode();
                }
                if (this.SelectedNavigation != null)
                {
                    hashCode = (hashCode * 59) + this.SelectedNavigation.GetHashCode();
                }
                if (this.Redirect != null)
                {
                    hashCode = (hashCode * 59) + this.Redirect.GetHashCode();
                }
                if (this.Experiments != null)
                {
                    hashCode = (hashCode * 59) + this.Experiments.GetHashCode();
                }
                if (this.Template != null)
                {
                    hashCode = (hashCode * 59) + this.Template.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Empty.GetHashCode();
                if (this.SiteParams != null)
                {
                    hashCode = (hashCode * 59) + this.SiteParams.GetHashCode();
                }
                if (this.Debug != null)
                {
                    hashCode = (hashCode * 59) + this.Debug.GetHashCode();
                }
                if (this.Warnings != null)
                {
                    hashCode = (hashCode * 59) + this.Warnings.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IncludeExpandedResults.GetHashCode();
                hashCode = (hashCode * 59) + this.FacetLimit.GetHashCode();
                if (this.RedirectMetadata != null)
                {
                    hashCode = (hashCode * 59) + this.RedirectMetadata.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
