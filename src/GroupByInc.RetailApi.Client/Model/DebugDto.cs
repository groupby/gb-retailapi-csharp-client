/*
 * GroupBy Retail
 *
 * GroupBy Retail API
 *
 * The version of the OpenAPI document: 0.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = GroupByInc.RetailApi.Client.Client.OpenAPIDateConverter;

namespace GroupByInc.RetailApi.Client.Model
{
    /// <summary>
    /// Contains debug info associated to response.
    /// </summary>
    [DataContract(Name = "DebugDto")]
    public partial class DebugDto : IEquatable<DebugDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DebugDto" /> class.
        /// </summary>
        /// <param name="rawSearchRequest">Search request in raw format executed internally against search engine..</param>
        /// <param name="rawSearchResponse">Search response in raw format received internally from search engine..</param>
        public DebugDto(List<Object> rawSearchRequest = default(List<Object>), List<Object> rawSearchResponse = default(List<Object>))
        {
            this.RawSearchRequest = rawSearchRequest;
            this.RawSearchResponse = rawSearchResponse;
        }

        /// <summary>
        /// Search request in raw format executed internally against search engine.
        /// </summary>
        /// <value>Search request in raw format executed internally against search engine.</value>
        [DataMember(Name = "rawSearchRequest", EmitDefaultValue = false)]
        public List<Object> RawSearchRequest { get; set; }

        /// <summary>
        /// Search response in raw format received internally from search engine.
        /// </summary>
        /// <value>Search response in raw format received internally from search engine.</value>
        [DataMember(Name = "rawSearchResponse", EmitDefaultValue = false)]
        public List<Object> RawSearchResponse { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DebugDto {\n");
            sb.Append("  RawSearchRequest: ").Append(RawSearchRequest).Append("\n");
            sb.Append("  RawSearchResponse: ").Append(RawSearchResponse).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DebugDto);
        }

        /// <summary>
        /// Returns true if DebugDto instances are equal
        /// </summary>
        /// <param name="input">Instance of DebugDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DebugDto input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RawSearchRequest == input.RawSearchRequest ||
                    this.RawSearchRequest != null &&
                    input.RawSearchRequest != null &&
                    this.RawSearchRequest.SequenceEqual(input.RawSearchRequest)
                ) && 
                (
                    this.RawSearchResponse == input.RawSearchResponse ||
                    this.RawSearchResponse != null &&
                    input.RawSearchResponse != null &&
                    this.RawSearchResponse.SequenceEqual(input.RawSearchResponse)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RawSearchRequest != null)
                {
                    hashCode = (hashCode * 59) + this.RawSearchRequest.GetHashCode();
                }
                if (this.RawSearchResponse != null)
                {
                    hashCode = (hashCode * 59) + this.RawSearchResponse.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
